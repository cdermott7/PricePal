<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PricePal - Enterprise Price Intelligence</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --blur-light: blur(20px);
      --blur-medium: blur(40px);
      --blur-heavy: blur(80px);
      --blur-intense: blur(120px);
      --success: #34C759;
      --warning: #FFD60A;
      --error: #FF453A;
      --info: #007AFF;
      --brand-primary: #007aff;
      --brand-secondary: #5856d6;
      --brand-accent: #1d1d1f;
    }

    /* Dark theme (default) */
    :root,
    [data-theme="dark"] {
      --primary-glass: rgba(255, 255, 255, 0.08);
      --secondary-glass: rgba(255, 255, 255, 0.04);
      --accent-glass: rgba(255, 255, 255, 0.12);
      --elevated-glass: rgba(255, 255, 255, 0.15);
      --text-primary: rgba(255, 255, 255, 0.98);
      --text-secondary: rgba(255, 255, 255, 0.78);
      --text-tertiary: rgba(255, 255, 255, 0.58);
      --text-quaternary: rgba(255, 255, 255, 0.38);
      --border-glass: rgba(255, 255, 255, 0.15);
      --border-subtle: rgba(255, 255, 255, 0.08);
      --shadow-soft: rgba(0, 0, 0, 0.08);
      --shadow-medium: rgba(0, 0, 0, 0.12);
      --shadow-hard: rgba(0, 0, 0, 0.18);
      --shadow-intense: rgba(0, 0, 0, 0.24);
      --bg-primary: #000000;
      --bg-secondary: #0a0a0a;
      --star-opacity: 0.1;
    }

    /* Light theme */
    [data-theme="light"] {
      --primary-glass: rgba(255, 255, 255, 0.7);
      --secondary-glass: rgba(255, 255, 255, 0.5);
      --accent-glass: rgba(255, 255, 255, 0.9);
      --elevated-glass: rgba(255, 255, 255, 0.8);
      --text-primary: rgba(0, 0, 0, 0.98);
      --text-secondary: rgba(0, 0, 0, 0.78);
      --text-tertiary: rgba(0, 0, 0, 0.58);
      --text-quaternary: rgba(0, 0, 0, 0.38);
      --border-glass: rgba(0, 0, 0, 0.08);
      --border-subtle: rgba(0, 0, 0, 0.05);
      --shadow-soft: rgba(0, 0, 0, 0.03);
      --shadow-medium: rgba(0, 0, 0, 0.08);
      --shadow-hard: rgba(0, 0, 0, 0.12);
      --shadow-intense: rgba(0, 0, 0, 0.16);
      --bg-primary: #f5f5f7;
      --bg-secondary: #ffffff;
      --star-opacity: 0.03;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
      background: radial-gradient(ellipse at top, var(--bg-secondary) 0%, var(--bg-primary) 100%),
                  radial-gradient(ellipse at bottom right, rgba(0, 122, 255, 0.03) 0%, transparent 50%),
                  radial-gradient(ellipse at bottom left, rgba(88, 86, 214, 0.02) 0%, transparent 50%),
                  var(--bg-primary);
      background-attachment: fixed;
      min-height: 100vh;
      color: var(--text-primary);
      overflow-x: hidden;
      font-weight: 400;
      line-height: 1.5;
      font-feature-settings: 'cv11', 'ss01';
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      position: relative;
      transition: background 0.3s ease, color 0.3s ease;
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: 
        radial-gradient(2px 2px at 20px 30px, rgba(255, 255, 255, var(--star-opacity)), transparent),
        radial-gradient(2px 2px at 40px 70px, rgba(255, 255, 255, calc(var(--star-opacity) * 0.8)), transparent),
        radial-gradient(1px 1px at 90px 40px, rgba(255, 255, 255, calc(var(--star-opacity) * 0.6)), transparent),
        radial-gradient(1px 1px at 130px 80px, rgba(255, 255, 255, calc(var(--star-opacity) * 0.4)), transparent),
        radial-gradient(2px 2px at 160px 30px, rgba(255, 255, 255, var(--star-opacity)), transparent);
      background-repeat: repeat;
      background-size: 200px 100px;
      pointer-events: none;
      z-index: 1;
      transition: opacity 0.3s ease;
    }

    .glass-surface {
      background: var(--primary-glass);
      backdrop-filter: var(--blur-light);
      -webkit-backdrop-filter: var(--blur-light);
      border: 1px solid var(--border-glass);
      box-shadow: 
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.1),
        inset 0 -1px 0 rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
    }

    .glass-elevated {
      background: var(--elevated-glass);
      backdrop-filter: var(--blur-medium);
      -webkit-backdrop-filter: var(--blur-medium);
      border: 1px solid var(--border-glass);
      box-shadow: 
        0 20px 60px var(--shadow-medium),
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.12),
        inset 0 -1px 0 rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
    }

    .nav-bar {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
      background: var(--secondary-glass);
      backdrop-filter: var(--blur-intense);
      -webkit-backdrop-filter: var(--blur-intense);
      border-bottom: 1px solid var(--border-subtle);
      padding: 0;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .nav-content {
      max-width: 1400px;
      margin: 0 auto;
      padding: 16px 32px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .brand-section {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .brand-logo {
      width: 40px;
      height: 40px;
      border-radius: 12px;
      background: var(--accent-glass);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-glass);
      box-shadow: 0 4px 16px var(--shadow-soft);
    }

    .brand-logo img {
      width: 28px;
      height: 28px;
      object-fit: contain;
    }

    .brand-logo-large {
      height: 80px;
      padding: 0;
      border-radius: 0;
      background: var(--accent-glass);
      display: flex;
      align-items: center;
      justify-content: flex-start;
      border: 1px solid var(--border-glass);
      box-shadow: 0 6px 24px var(--shadow-soft);
      flex: 1;
      margin-right: 16px;
      min-width: 300px;
      max-width: 100%;
    }

    .brand-logo-large img {
      width: 100%;
      height: 64px;
      max-width: 800px;
      object-fit: contain;
    }

    .brand-text {
      display: flex;
      flex-direction: column;
      gap: 2px;
    }

    .brand-name {
      font-size: 20px;
      font-weight: 700;
      letter-spacing: -0.02em;
      color: var(--text-primary);
    }

    .brand-tagline {
      font-size: 13px;
      font-weight: 500;
      color: var(--text-secondary);
      letter-spacing: -0.005em;
    }

    .nav-actions {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .theme-toggle {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 44px;
      height: 44px;
      border: 1px solid var(--border-glass);
      border-radius: 12px;
      background: var(--secondary-glass);
      color: var(--text-primary);
      cursor: pointer;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }

    .theme-toggle:hover {
      background: var(--accent-glass);
      transform: translateY(-1px);
      box-shadow: 0 8px 24px var(--shadow-soft);
    }

    .theme-icon {
      position: absolute;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .sun-icon {
      opacity: 0;
      transform: rotate(180deg) scale(0.8);
    }

    .moon-icon {
      opacity: 1;
      transform: rotate(0deg) scale(1);
    }

    [data-theme="light"] .sun-icon {
      opacity: 1;
      transform: rotate(0deg) scale(1);
    }

    [data-theme="light"] .moon-icon {
      opacity: 0;
      transform: rotate(-180deg) scale(0.8);
    }

    .status-pill {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 600;
      letter-spacing: -0.005em;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      border: 1px solid transparent;
    }

    .status-pill.ready {
      background: rgba(52, 199, 89, 0.12);
      color: var(--success);
      border-color: rgba(52, 199, 89, 0.2);
    }

    .status-pill.analyzing {
      background: rgba(255, 214, 10, 0.12);
      color: var(--warning);
      border-color: rgba(255, 214, 10, 0.2);
    }

    .status-pill.error {
      background: rgba(255, 69, 58, 0.12);
      color: var(--error);
      border-color: rgba(255, 69, 58, 0.2);
    }

    .status-spinner {
      width: 12px;
      height: 12px;
      border: 2px solid rgba(255, 214, 10, 0.3);
      border-top: 2px solid var(--warning);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .main-container {
      margin-top: 88px;
      max-width: 1400px;
      margin-left: auto;
      margin-right: auto;
      padding: 32px;
      display: grid;
      grid-template-columns: 420px 1fr;
      gap: 32px;
      min-height: calc(100vh - 120px);
      position: relative;
      z-index: 10;
    }

    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 24px;
    }

    .panel {
      border-radius: 20px;
      overflow: hidden;
      position: relative;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .panel:hover {
      transform: translateY(-2px);
      box-shadow: 
        0 32px 80px var(--shadow-medium),
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.15),
        inset 0 -1px 0 rgba(0, 0, 0, 0.08);
    }

    .panel-header {
      padding: 24px 24px 16px;
      border-bottom: 1px solid var(--border-subtle);
    }

    .panel-title {
      font-size: 18px;
      font-weight: 700;
      letter-spacing: -0.02em;
      color: var(--text-primary);
      margin-bottom: 4px;
    }

    .panel-subtitle {
      font-size: 14px;
      font-weight: 500;
      color: var(--text-secondary);
      letter-spacing: -0.005em;
    }

    .panel-content {
      padding: 24px;
    }

    .photo-catalogue {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
      margin-bottom: 24px;
    }

    .photo-item {
      aspect-ratio: 1;
      position: relative;
      border-radius: 16px;
      overflow: hidden;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      background: var(--secondary-glass);
      border: 2px solid transparent;
      group: hover;
    }

    .photo-item:hover {
      transform: scale(1.02);
      border-color: var(--border-glass);
      box-shadow: 0 8px 32px var(--shadow-soft);
    }

    .photo-item.active {
      border-color: var(--info);
      box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.15);
      transform: scale(1.02);
    }

    .photo-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .photo-overlay {
      position: absolute;
      inset: 0;
      background: rgba(0, 0, 0, 0.3);
      display: flex;
      align-items: flex-end;
      padding: 12px;
      opacity: 0;
      transition: opacity 0.2s ease;
    }

    .photo-item:hover .photo-overlay {
      opacity: 1;
    }

    .photo-meta {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 12px;
      font-weight: 600;
      color: var(--text-primary);
    }

    .analysis-badge {
      padding: 4px 8px;
      border-radius: 8px;
      font-size: 10px;
      font-weight: 700;
      letter-spacing: 0.02em;
      text-transform: uppercase;
    }

    .analysis-badge.complete {
      background: var(--success);
      color: white;
    }

    .analysis-badge.pending {
      background: var(--warning);
      color: white;
    }

    .main-content {
      display: flex;
      flex-direction: column;
      gap: 32px;
    }

    .hero-section {
      text-align: center;
      padding: 64px 0;
    }

    .hero-title {
      font-size: 48px;
      font-weight: 800;
      letter-spacing: -0.03em;
      line-height: 1.1;
      margin-bottom: 16px;
      color: var(--text-primary);
    }

    .hero-subtitle {
      font-size: 20px;
      font-weight: 500;
      color: var(--text-secondary);
      letter-spacing: -0.01em;
      margin-bottom: 32px;
    }

    .cta-button {
      display: inline-flex;
      align-items: center;
      gap: 12px;
      padding: 16px 32px;
      border-radius: 16px;
      font-size: 16px;
      font-weight: 600;
      letter-spacing: -0.01em;
      text-decoration: none;
      color: var(--text-primary);
      background: var(--accent-glass);
      border: 1px solid var(--border-glass);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
    }

    .cta-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 16px 48px var(--shadow-medium);
      background: var(--elevated-glass);
    }

    .photo-display {
      position: relative;
      background: var(--secondary-glass);
      border-radius: 24px;
      overflow: hidden;
      aspect-ratio: 4/3;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-glass);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .photo-display:hover {
      background: var(--primary-glass);
      transform: scale(1.005);
    }

    .processing-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.6);
      backdrop-filter: var(--blur-medium);
      -webkit-backdrop-filter: var(--blur-medium);
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 20px;
      opacity: 1;
      transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .processing-overlay.complete {
      opacity: 0;
      pointer-events: none;
    }

    .processing-indicator {
      text-align: center;
      color: var(--text-primary);
    }

    .processing-spinner {
      width: 60px;
      height: 60px;
      border: 3px solid rgba(255, 255, 255, 0.1);
      border-top: 3px solid var(--brand-primary);
      border-radius: 50%;
      margin: 0 auto 20px;
      animation: processing-spin 1.2s cubic-bezier(0.4, 0, 0.2, 1) infinite;
    }

    .processing-text {
      font-size: 18px;
      font-weight: 700;
      margin-bottom: 8px;
      letter-spacing: -0.01em;
    }

    .processing-subtitle {
      font-size: 14px;
      font-weight: 500;
      color: var(--text-secondary);
      letter-spacing: -0.005em;
    }

    @keyframes processing-spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .photo-display img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: 20px;
      box-shadow: 0 20px 60px var(--shadow-medium);
    }

    .product-name-section {
      text-align: center;
      margin: 24px 0;
      padding: 20px;
      background: var(--accent-glass);
      border-radius: 20px;
      border: 1px solid var(--border-glass);
      box-shadow: 0 8px 32px var(--shadow-soft);
    }

    .main-product-name {
      font-size: 36px;
      font-weight: 800;
      color: var(--text-primary);
      margin: 0;
      letter-spacing: -0.02em;
      line-height: 1.2;
    }

    .nearby-stores-section {
      margin: 24px 0;
      padding: 20px;
      background: var(--secondary-glass);
      border-radius: 20px;
      border: 1px solid var(--border-glass);
      box-shadow: 0 8px 32px var(--shadow-soft);
    }

    .nearby-stores-title {
      font-size: 20px;
      font-weight: 700;
      color: var(--text-primary);
      margin: 0 0 16px 0;
      letter-spacing: -0.01em;
    }

    .nearby-stores-quick-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 12px;
    }

    .nearby-store-card {
      background: var(--primary-glass);
      border-radius: 12px;
      padding: 16px;
      border: 1px solid var(--border-glass);
      text-align: center;
      transition: all 0.3s ease;
    }

    .nearby-store-card:hover {
      background: var(--accent-glass);
      transform: translateY(-2px);
      box-shadow: 0 8px 24px var(--shadow-soft);
    }

    .store-logo-container {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 8px;
      height: 40px;
    }

    .nearby-store-logo {
      max-width: 60px;
      max-height: 40px;
      object-fit: contain;
      background: white;
      border-radius: 4px;
      padding: 4px;
      border: 1px solid var(--border-glass);
    }

    .nearby-store-name {
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 8px;
    }

    .nearby-store-action {
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 12px;
      font-weight: 600;
      background: var(--info);
      color: white;
      text-decoration: none;
      transition: all 0.2s ease;
    }

    .nearby-store-action:hover {
      background: var(--brand-secondary);
      transform: translateY(-1px);
    }

    .analysis-section {
      display: grid;
      gap: 24px;
    }

    .price-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
    }

    .price-card {
      background: var(--secondary-glass);
      border: 1px solid var(--border-glass);
      border-radius: 16px;
      padding: 24px;
      position: relative;
      overflow: hidden;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .price-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: var(--brand-primary);
    }

    .price-card:hover {
      transform: translateY(-4px);
      background: var(--primary-glass);
      box-shadow: 0 20px 60px var(--shadow-medium);
    }

    .price-card h3 {
      font-size: 18px;
      font-weight: 700;
      letter-spacing: -0.01em;
      color: var(--text-primary);
      margin-bottom: 8px;
    }

    .price-card .store {
      font-size: 14px;
      font-weight: 600;
      color: var(--text-secondary);
      margin-bottom: 12px;
      text-transform: uppercase;
      letter-spacing: 0.02em;
    }

    .price-card .price {
      font-size: 28px;
      font-weight: 800;
      color: var(--success);
      letter-spacing: -0.02em;
      margin-bottom: 16px;
    }

    .price-card .savings {
      font-size: 14px;
      font-weight: 600;
      color: var(--warning);
      background: rgba(255, 214, 10, 0.1);
      padding: 6px 12px;
      border-radius: 8px;
      display: inline-block;
    }



    .action-button {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 12px 16px;
      border-radius: 12px;
      font-size: 14px;
      font-weight: 600;
      letter-spacing: -0.01em;
      text-decoration: none;
      color: var(--text-primary);
      background: var(--accent-glass);
      border: 1px solid var(--border-glass);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
    }

    .action-button:hover {
      transform: translateY(-1px);
      box-shadow: 0 8px 24px var(--shadow-soft);
      background: var(--elevated-glass);
    }

    .action-button:active {
      transform: translateY(0);
    }

    .action-button.secondary {
      background: var(--secondary-glass);
      color: var(--text-secondary);
    }

    .action-button.secondary:hover {
      background: var(--primary-glass);
      color: var(--text-primary);
    }

    .action-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }



    /* Enhanced Price Comparison Table Styles */
    .price-comparison-table {
      width: 100%;
      border-radius: 20px;
      overflow: hidden;
      background: var(--secondary-glass);
      border: 1px solid var(--border-glass);
      box-shadow: 0 8px 32px var(--shadow-soft);
      backdrop-filter: var(--blur-light);
      -webkit-backdrop-filter: var(--blur-light);
    }



    .table-row {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr 1fr;
      border-bottom: 1px solid var(--border-subtle);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
    }

    .table-row:hover {
      background: var(--primary-glass);
      transform: translateX(4px);
      box-shadow: 0 4px 20px var(--shadow-soft);
    }

    .table-row:last-child {
      border-bottom: none;
    }

    .table-row::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 3px;
      background: var(--brand-primary);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .table-row:hover::before {
      opacity: 1;
    }

    .product-cell {
      display: flex;
      align-items: center;
      padding: 24px;
    }

    .product-image {
      width: 80px;
      height: 80px;
      border-radius: 16px;
      overflow: hidden;
      background: var(--accent-glass);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid var(--border-glass);
      box-shadow: 0 4px 16px var(--shadow-soft);
      transition: all 0.3s ease;
      flex-shrink: 0;
    }

    .product-image:hover {
      transform: scale(1.05);
      box-shadow: 0 8px 32px var(--shadow-medium);
    }

    .product-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: all 0.3s ease;
    }

    .product-placeholder {
      color: var(--text-tertiary);
      transition: all 0.3s ease;
    }

    .table-row:hover .product-placeholder {
      color: var(--text-secondary);
    }

    .product-details {
      flex: 1;
      min-width: 0;
    }

    .product-name {
      font-size: 16px;
      font-weight: 700;
      color: var(--text-primary);
      line-height: 1.4;
      margin-bottom: 6px;
      letter-spacing: -0.01em;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      max-height: 2.8em;
    }

    .product-description {
      font-size: 13px;
      color: var(--text-tertiary);
      line-height: 1.4;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .product-availability {
      font-size: 12px;
      font-weight: 600;
      margin-top: 4px;
      padding: 2px 8px;
      border-radius: 8px;
      display: inline-block;
    }

    .product-availability.in-stock {
      background: rgba(52, 199, 89, 0.1);
      color: var(--success);
    }

    .product-availability.out-of-stock {
      background: rgba(255, 69, 58, 0.1);
      color: var(--error);
    }

    .store-cell {
      display: flex;
      align-items: center;
      padding: 24px 20px;
    }

    .store-info {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      text-align: center;
    }

    .store-logo {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      object-fit: contain;
      background: white;
      padding: 8px;
      border: 2px solid var(--border-glass);
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px var(--shadow-soft);
    }

    .store-logo:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 16px var(--shadow-medium);
    }

    .store-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      background: var(--accent-glass);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-tertiary);
      border: 2px solid var(--border-glass);
      transition: all 0.3s ease;
    }

    .store-icon:hover {
      background: var(--primary-glass);
      color: var(--text-secondary);
      transform: scale(1.1);
    }

    .store-name {
      font-size: 14px;
      font-weight: 700;
      color: var(--text-secondary);
      letter-spacing: -0.005em;
    }

    .store-rating {
      font-size: 12px;
      color: var(--text-tertiary);
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .price-cell {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 24px 20px;
      text-align: center;
    }

    .price-value {
      font-size: 24px;
      font-weight: 900;
      color: var(--success);
      margin-bottom: 6px;
      letter-spacing: -0.02em;
    }

    .original-price {
      font-size: 14px;
      color: var(--text-tertiary);
      text-decoration: line-through;
      margin-bottom: 4px;
    }

    .savings-badge {
      font-size: 11px;
      font-weight: 700;
      color: white;
      background: var(--warning);
      padding: 4px 10px;
      border-radius: 12px;
      display: inline-block;
      text-transform: uppercase;
      letter-spacing: 0.02em;
      box-shadow: 0 2px 8px rgba(255, 214, 10, 0.3);
    }

    .best-price {
      position: relative;
    }

    .best-price::before {
      content: '🏆 Best Price';
      position: absolute;
      top: -12px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 10px;
      font-weight: 700;
      color: var(--warning);
      background: rgba(255, 214, 10, 0.15);
      border: 1px solid rgba(255, 214, 10, 0.3);
      padding: 4px 8px;
      border-radius: 12px;
      white-space: nowrap;
      z-index: 10;
      box-shadow: 0 2px 8px rgba(255, 214, 10, 0.2);
    }

    .action-cell {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 24px 20px;
      gap: 8px;
    }

    .buy-button {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 14px 20px;
      border-radius: 16px;
      font-size: 14px;
      font-weight: 700;
      text-decoration: none;
      border: none;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      background: var(--brand-primary);
      color: white;
      white-space: nowrap;
      box-shadow: 0 4px 16px rgba(0, 122, 255, 0.2);
    }

    .buy-button:hover {
      background: var(--brand-secondary);
      transform: translateY(-2px) scale(1.02);
      box-shadow: 0 8px 32px rgba(0, 122, 255, 0.4);
    }

    .buy-button.disabled {
      background: var(--accent-glass);
      color: var(--text-tertiary);
      cursor: not-allowed;
      box-shadow: none;
    }

    .buy-button.disabled:hover {
      transform: none;
      box-shadow: none;
    }

    .compare-button {
      font-size: 12px;
      color: var(--text-tertiary);
      background: var(--secondary-glass);
      padding: 8px 12px;
      border-radius: 12px;
      border: 1px solid var(--border-glass);
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .compare-button:hover {
      color: var(--text-secondary);
      background: var(--primary-glass);
    }

    .find-nearby-button {
      font-size: 12px;
      color: var(--info);
      background: rgba(0, 122, 255, 0.1);
      padding: 8px 12px;
      border-radius: 12px;
      border: 1px solid rgba(0, 122, 255, 0.2);
      cursor: pointer;
      transition: all 0.2s ease;
      font-weight: 600;
      white-space: nowrap;
    }

    .find-nearby-button:hover {
      color: white;
      background: var(--info);
      border-color: var(--info);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 122, 255, 0.3);
    }

    .find-nearby-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    /* Nearby stores modal styles */
    .nearby-stores-modal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 2000;
      padding: 20px;
    }

    .nearby-stores-content {
      background: var(--secondary-glass);
      backdrop-filter: var(--blur-intense);
      -webkit-backdrop-filter: var(--blur-intense);
      border: 1px solid var(--border-glass);
      border-radius: 24px;
      padding: 32px;
      max-width: 650px;
      width: 100%;
      max-height: 85vh;
      overflow-y: auto;
      box-shadow: 
        0 32px 80px var(--shadow-intense),
        0 16px 40px var(--shadow-medium),
        inset 0 2px 0 rgba(255, 255, 255, 0.15),
        inset 0 -2px 0 rgba(0, 0, 0, 0.08);
      position: relative;
    }

    .nearby-stores-content::before {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: 24px;
      padding: 1px;
      background: linear-gradient(135deg, 
        rgba(255, 255, 255, 0.2) 0%, 
        rgba(255, 255, 255, 0.05) 50%, 
        rgba(255, 255, 255, 0.1) 100%);
      mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
      mask-composite: exclude;
      -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
      -webkit-mask-composite: xor;
    }

    .nearby-stores-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 16px;
      border-bottom: 1px solid var(--border-subtle);
    }

    .nearby-stores-title {
      font-size: 20px;
      font-weight: 700;
      color: var(--text-primary);
    }

    .close-modal {
      background: var(--secondary-glass);
      backdrop-filter: var(--blur-light);
      -webkit-backdrop-filter: var(--blur-light);
      border: 1px solid var(--border-glass);
      border-radius: 12px;
      font-size: 20px;
      color: var(--text-secondary);
      cursor: pointer;
      padding: 8px;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 16px var(--shadow-soft);
    }

    .close-modal:hover {
      color: var(--text-primary);
      background: var(--accent-glass);
      transform: scale(1.1);
      box-shadow: 0 8px 24px var(--shadow-medium);
    }

    .close-modal:active {
      transform: scale(1.05);
    }

    .store-location {
      display: flex;
      align-items: center;
      gap: 20px;
      padding: 20px;
      border-radius: 16px;
      border: 1px solid var(--border-glass);
      margin-bottom: 16px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      background: var(--primary-glass);
      backdrop-filter: var(--blur-light);
      -webkit-backdrop-filter: var(--blur-light);
      box-shadow: 
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
      position: relative;
      overflow: hidden;
    }

    .store-location::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, 
        transparent, 
        rgba(255, 255, 255, 0.05), 
        transparent);
      transition: left 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .store-location:hover {
      background: var(--accent-glass);
      border-color: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px) scale(1.01);
      box-shadow: 
        0 16px 48px var(--shadow-medium),
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.15);
    }

    .store-location:hover::before {
      left: 100%;
    }

    .store-location-info {
      flex: 1;
    }

    .store-location-name {
      font-size: 16px;
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 4px;
    }

    .store-location-address {
      font-size: 13px;
      color: var(--text-secondary);
      margin-bottom: 4px;
    }

    .store-location-meta {
      display: flex;
      align-items: center;
      gap: 12px;
      font-size: 12px;
      color: var(--text-tertiary);
    }

    .store-distance {
      font-weight: 600;
      color: var(--info);
    }

    .store-rating {
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .store-actions {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .directions-button {
      padding: 12px 20px;
      border-radius: 12px;
      font-size: 14px;
      font-weight: 700;
      text-decoration: none;
      border: none;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      background: linear-gradient(135deg, var(--info) 0%, var(--brand-secondary) 100%);
      color: white;
      text-align: center;
      position: relative;
      overflow: hidden;
      box-shadow: 
        0 4px 16px rgba(0, 122, 255, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
    }

    .directions-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, 
        transparent, 
        rgba(255, 255, 255, 0.2), 
        transparent);
      transition: left 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .directions-button:hover {
      transform: translateY(-2px) scale(1.02);
      box-shadow: 
        0 8px 32px rgba(0, 122, 255, 0.4),
        0 4px 16px rgba(0, 122, 255, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.3);
    }

    .directions-button:hover::before {
      left: 100%;
    }

    .directions-button:active {
      transform: translateY(-1px) scale(1.01);
    }

    /* Discount section styles */
    .discount-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 16px;
    }

    .discount-card {
      background: var(--secondary-glass);
      border: 1px solid var(--border-glass);
      border-radius: 16px;
      padding: 20px;
      position: relative;
      overflow: hidden;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 16px var(--shadow-soft);
    }

    .discount-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, var(--warning) 0%, var(--success) 100%);
    }

    .discount-card:hover {
      transform: translateY(-2px);
      background: var(--primary-glass);
      box-shadow: 0 8px 32px var(--shadow-medium);
    }

    .discount-header {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 12px;
    }

    .discount-icon {
      font-size: 24px;
      width: 40px;
      height: 40px;
      background: rgba(255, 214, 10, 0.1);
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid rgba(255, 214, 10, 0.2);
    }

    .discount-title {
      font-size: 16px;
      font-weight: 700;
      color: var(--text-primary);
      letter-spacing: -0.01em;
    }

    .discount-description {
      font-size: 14px;
      color: var(--text-secondary);
      line-height: 1.5;
      margin-bottom: 16px;
    }

    .discount-store {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 12px;
      background: var(--accent-glass);
      border-radius: 8px;
      border: 1px solid var(--border-glass);
    }

    .discount-store-logo {
      width: 20px;
      height: 20px;
      object-fit: contain;
      background: white;
      border-radius: 4px;
      padding: 2px;
    }

    .discount-store-name {
      font-size: 13px;
      font-weight: 600;
      color: var(--text-secondary);
    }

    /* Responsive button text */
    .mobile-text {
      display: none;
    }

    .desktop-text {
      display: inline;
    }



    .empty-state {
      text-align: center;
      padding: 64px 32px;
      color: var(--text-tertiary);
    }

    .empty-icon {
      width: 96px;
      height: 96px;
      margin: 0 auto 24px;
      background: var(--secondary-glass);
      border-radius: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 40px;
      border: 1px solid var(--border-glass);
      color: var(--text-quaternary);
    }

    .empty-title {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 12px;
      color: var(--text-secondary);
      letter-spacing: -0.02em;
    }

    .empty-subtitle {
      font-size: 16px;
      line-height: 1.6;
      max-width: 400px;
      margin: 0 auto;
      font-weight: 500;
    }

    .pulse {
      animation: pulse 2.5s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.6; }
    }

    .shimmer-effect {
      position: relative;
      overflow: hidden;
    }

    .shimmer-effect::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.08), transparent);
      animation: shimmer 2.5s infinite;
    }

    @keyframes shimmer {
      0% { left: -100%; }
      100% { left: 100%; }
    }

    @media (max-width: 1200px) {
      .main-container {
        grid-template-columns: 360px 1fr;
        gap: 24px;
        padding: 24px;
      }
      
      .hero-title {
        font-size: 36px;
      }

      .table-header {
        grid-template-columns: 2fr 1.2fr 1fr 0.8fr;
      }
      
      .table-row {
        grid-template-columns: 2fr 1.2fr 1fr 0.8fr;
      }
    }

    @media (max-width: 900px) {
      .main-container {
        grid-template-columns: 1fr;
        gap: 16px;
        margin-top: 80px;
      }
      
      .sidebar {
        order: 2;
      }
      
      .main-content {
        order: 1;
      }
      
      .nav-content {
        padding: 12px 24px;
      }
      
      .brand-logo-large {
        height: 65px;
        padding: 0 24px;
        margin-right: 12px;
        min-width: 0;
        max-width: calc(100vw - 80px);
      }
      
      .brand-logo-large img {
        width: 100%;
        height: 52px;
        max-width: 200px;
        object-fit: contain;
      }
      
      .hero-title {
        font-size: 32px;
      }
      
      .hero-subtitle {
        font-size: 18px;
      }
      
      .price-grid {
        grid-template-columns: 1fr;
      }
      
      .photo-catalogue {
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 12px;
      max-height: 200px;
      overflow-y: auto;
      }

      /* Tablet table adjustments */
      .table-row {
        grid-template-columns: 1.8fr 1fr 1fr 1fr;
      }

      .product-cell {
        gap: 16px;
        padding: 20px 16px;
      }

      .product-image {
        width: 60px;
        height: 60px;
      }

      .store-cell {
        padding: 20px 12px;
      }

      .store-logo, .store-icon {
        width: 40px;
        height: 40px;
      }

      .store-name {
        font-size: 13px;
      }

      .price-cell {
        padding: 20px 12px;
      }

      .price-value {
        font-size: 20px;
      }

      .action-cell {
        padding: 20px 12px;
      }

      .buy-button {
        padding: 10px 14px;
        font-size: 13px;
      }
    }

    @media (max-width: 600px) {
      /* Universal mobile constraints */
      * {
        max-width: 100vw;
        box-sizing: border-box;
      }
      
      /* Ensure theme toggle is properly sized for touch */
      .theme-toggle {
        width: 48px;
        height: 48px;
        min-width: 48px;
        min-height: 48px;
      }
      
      .main-container {
        padding: 12px;
        max-width: 100vw;
        box-sizing: border-box;
      }
      
      .nav-content {
        padding: 8px 12px;
        max-width: 100vw;
        box-sizing: border-box;
      }
      
      .brand-logo-large {
        height: 50px;
        padding: 0 8px;
        margin-right: 8px;
        min-width: 0;
        flex: 1;
        max-width: calc(100vw - 80px);
      }
      
      .brand-logo-large img {
        width: 100%;
        height: 40px;
        max-width: 180px;
        object-fit: contain;
      }
      
      .photo-catalogue {
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        gap: 8px;
      }
      
      .hero-title {
        font-size: 28px;
      }
      
      .panel-content {
        padding: 12px;
        max-width: 100%;
        box-sizing: border-box;
      }
      
      .analysis-section {
        gap: 16px;
      }
      
      .price-card {
        padding: 20px;
      }
      
      .recommendation-card {
        padding: 24px;
      }
      
      /* Mobile table adjustments - NO HORIZONTAL SCROLL */
      .price-comparison-table {
        overflow-x: visible;
        border-radius: 16px;
        width: 100%;
        max-width: 100vw;
        box-sizing: border-box;
      }

      .table-row {
        grid-template-columns: 1fr 1fr 1fr 1fr;
        min-width: auto;
      }
      
      .product-cell {
        padding: 12px 8px;
        min-width: auto;
      }
      
      .product-name {
        font-size: 11px;
        line-height: 1.3;
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
      }

      .product-description {
      display: none;
    }

      .store-cell {
        padding: 12px 6px;
        min-width: auto;
      }
      
      .store-info {
        gap: 4px;
      }
      
      .store-logo, .store-icon {
        width: 24px;
        height: 24px;
      }
      
      .store-name {
        font-size: 9px;
        text-align: center;
      }

      .store-rating {
        display: none;
      }
      
      .price-cell {
        padding: 12px 6px;
        min-width: auto;
      }
      
      .price-value {
        font-size: 14px;
      }

      .original-price {
        font-size: 10px;
      }

      .savings-badge {
        font-size: 8px;
        padding: 2px 4px;
      }

      .best-price::before {
        font-size: 7px;
        padding: 2px 4px;
        top: -8px;
      }

      .action-cell {
        padding: 12px 4px;
        min-width: auto;
        gap: 4px;
      }
      
      .buy-button {
        padding: 10px 12px;
        font-size: 11px;
        gap: 4px;
        min-height: 44px;
        min-width: 44px;
      }

      .buy-button svg {
        width: 12px;
        height: 12px;
      }

      .compare-button {
        font-size: 10px;
        padding: 8px 10px;
        white-space: nowrap;
        min-height: 36px;
      }

      .find-nearby-button {
        font-size: 10px;
        padding: 8px 10px;
        white-space: nowrap;
        min-height: 36px;
      }

      /* Show mobile text on small screens */
      .mobile-text {
        display: inline;
      }

      .desktop-text {
        display: none;
      }

      /* Optimize modal for mobile */
      .nearby-stores-modal {
        padding: 12px;
      }

      .nearby-stores-content {
        padding: 20px;
        max-height: 92vh;
        border-radius: 20px;
      }

      .nearby-stores-header {
        margin-bottom: 16px;
        padding-bottom: 12px;
      }

      .nearby-stores-title {
        font-size: 18px;
      }

      .close-modal {
        width: 36px;
        height: 36px;
        font-size: 18px;
      }

      .store-location {
        padding: 16px;
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
        margin-bottom: 12px;
      }

      .store-location-name {
        font-size: 15px;
        font-weight: 700;
      }

      .store-location-address {
        font-size: 13px;
      }

      .store-location-meta {
        flex-wrap: wrap;
        gap: 8px;
        font-size: 11px;
      }

      .store-actions {
        width: 100%;
      }

      .directions-button {
        width: 100%;
        padding: 14px;
        font-size: 15px;
        font-weight: 700;
      }

      /* Mobile discount styles */
      .discount-grid {
        grid-template-columns: 1fr;
        gap: 12px;
      }

      .discount-card {
        padding: 12px;
        max-width: 100%;
        box-sizing: border-box;
      }

      .discount-title {
        font-size: 15px;
      }

      .discount-description {
        font-size: 13px;
      }

      /* Mobile product name section */
      .main-product-name {
        font-size: 24px;
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
        text-align: center;
      }

      .product-name-section {
        margin: 12px 0;
        padding: 12px;
        max-width: 100%;
        box-sizing: border-box;
      }

      .nearby-stores-section {
        margin: 12px 0;
        padding: 12px;
        max-width: 100%;
        box-sizing: border-box;
      }

      .nearby-stores-quick-list {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 8px;
      }

      .nearby-store-card {
        padding: 12px;
      }

      .nearby-store-name {
        font-size: 13px;
        word-wrap: break-word;
        overflow-wrap: break-word;
        text-align: center;
      }

      .nearby-store-action {
        padding: 6px 12px;
        font-size: 11px;
      }

    }
  </style>
</head>
<body>
  <nav class="nav-bar">
    <div class="nav-content">
      <div class="brand-section">
        <div class="brand-logo-large">
          <img src="/assets/PricePalLogo.png" alt="PricePal">
  </div>
      </div>
      <div class="nav-actions">
        <button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
          <svg class="theme-icon sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="5"/>
            <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
          </svg>
          <svg class="theme-icon moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
          </svg>
        </button>
        <div id="global-status" class="status-pill ready">
          Ready
        </div>
      </div>
    </div>
  </nav>

  <div class="main-container">
    <div class="sidebar">
      <div class="panel glass-elevated">
        <div class="panel-header">
          <div class="panel-title">Photo Catalogue</div>
          <div class="panel-subtitle">Smart visual analysis</div>
        </div>
        <div class="panel-content">
          <div id="photo-catalogue" class="photo-catalogue">
            <div class="empty-state">
              <div class="empty-icon">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
                  <circle cx="12" cy="13" r="4"/>
                </svg>
              </div>
              <div class="empty-title">No Photos</div>
              <div class="empty-subtitle">Take photos with your Mentra glasses to begin intelligent price analysis</div>
            </div>
          </div>
        </div>
      </div>


    </div>

    <div class="main-content">
      <div id="main-display">
        <div class="hero-section">
          <div class="hero-title">Discover Better Prices</div>
          <div class="hero-subtitle">
            AI-powered price intelligence at the speed of light
          </div>
          <div class="cta-button">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
              <circle cx="12" cy="13" r="4"/>
            </svg>
            Take Photo to Start
          </div>
        </div>
      </div>

      <div id="analysis-section" class="analysis-section" style="display: none;">
        <div class="panel glass-elevated">
          <div class="panel-header">
            <div class="panel-title">Alternative Products</div>
            <div class="panel-subtitle">Alternative products at similar prices</div>
          </div>
          <div class="panel-content">
            <div id="price-comparison" class="price-grid">
              <!-- Price cards will be inserted here -->
            </div>
          </div>
  </div>
  
        <div id="discount-section" style="display: none;">
          <!-- Discount content will be inserted here -->
        </div>
        

      </div>
    </div>
  </div>

  <script>
    function createDiscountSection() {
      let discountSection = document.getElementById('discount-section');
      if (!discountSection) {
        discountSection = document.createElement('div');
        discountSection.id = 'discount-section';
        discountSection.style.display = 'none';
        
        const analysisSection = document.getElementById('analysis-section');
        if (analysisSection && analysisSection.parentNode) {
          analysisSection.parentNode.insertBefore(discountSection, analysisSection.nextSibling);
        }
      }
      return discountSection;
    }
    let currentPhotos = [];
    let currentPhotoIndex = -1;
    let analysisCache = new Map();
    let activeAnalysisRequests = new Map(); // Track active analysis requests

         // Enhanced AI parsing with multiple strategies
     function parseAIResponse(analysisText) {
       console.log(`[FRONTEND] Parsing AI response (length: ${analysisText.length}):`, analysisText);
       
       const parsed = {
         products: [],
         recommendation: '',
         summary: '',
         originalText: analysisText,
         discounts: [],
         actualProductName: '',
         nearbyStores: []
       };

       try {
        // Strategy 0: Extract the actual product name using the new format
        const productBlock = analysisText.match(/\{\s*Image Product Name:\s*([^}]+?)\s*Stores Where the Product is Sold in San Francisco:/i);
        if (productBlock) {
          parsed.actualProductName = productBlock[1].trim();
          console.log(`[FRONTEND] Found actual product name: "${parsed.actualProductName}"`);
        } else {
          const simpleProductMatch = analysisText.match(/Image Product Name:\s*([^\n\r]+)/i);
          if (simpleProductMatch) {
            parsed.actualProductName = simpleProductMatch[1].trim();
            console.log(`[FRONTEND] Found simple product name: "${parsed.actualProductName}"`);
          }
        }

        // Extract nearby stores from the new format
        const storesMatch = analysisText.match(/Stores Where the Product is Sold in San Francisco:\s*\[(.*?)\]/i);
        if (storesMatch) {
          const storesText = storesMatch[1];
          // Split by comma and clean up each store name
          parsed.nearbyStores = storesText.split(',').map(store => store.trim()).filter(store => store && store !== '');
          console.log(`[FRONTEND] Found nearby stores: ${parsed.nearbyStores.join(', ')}`);
        }
        
        // Strategy 1: More robust JSON extraction for products
        console.log(`[FRONTEND] Full analysis text:`, analysisText);
        
        // Find ALL JSON blocks in the text
        const jsonBlocks = analysisText.match(/```json\s*([\s\S]*?)\s*```/g) || [];
        const allJsonBlocks = [...jsonBlocks];
        
        // Also look for standalone JSON arrays
        const standaloneArrays = analysisText.match(/\[[\s\S]*?\]/g) || [];
        allJsonBlocks.push(...standaloneArrays);
        
        console.log(`[FRONTEND] Found ${allJsonBlocks.length} total JSON blocks`);
        
        // Try to find the FIRST array that contains product alternatives (not discounts)
        let jsonText = null;
        
        for (const block of allJsonBlocks) {
          const cleanJson = block.replace(/```json|```/g, '').trim();
          try {
            const testData = JSON.parse(cleanJson);
            console.log(`[FRONTEND] Testing JSON block:`, testData);
            
            // Check if this looks like alternatives product data (should be an array with Product Name, not Discount Title)
            if (Array.isArray(testData) && testData.length > 0) {
              const firstItem = testData[0];
              console.log(`[FRONTEND] First item structure:`, Object.keys(firstItem));
              
              // This should be alternatives if it has Product Name but NOT Discount Title
              if ((firstItem['Product Name'] || firstItem.ProductName || firstItem.name) && 
                  !firstItem['Discount Title'] && !firstItem.title) {
                jsonText = cleanJson;
                console.log(`[FRONTEND] Found alternatives JSON block:`, jsonText);
                break;
              }
            }
          } catch (e) {
            console.error(`[FRONTEND] JSON parse error:`, e);
          }
        }
        
                 if (jsonText) {
           try {
             // Clean and parse the JSON
             const cleanJson = jsonText.trim();
             console.log(`[FRONTEND] Attempting to parse JSON of length:`, cleanJson.length);
             console.log(`[FRONTEND] JSON content:`, cleanJson);
             
             const data = JSON.parse(cleanJson);
             console.log(`[FRONTEND] Successfully parsed JSON:`, data);
             console.log(`[FRONTEND] Data type:`, typeof data, `Array:`, Array.isArray(data));
            
            // Handle both direct array and wrapped object formats
            let products = [];
            if (Array.isArray(data)) {
              products = data;
            } else if (data.alternatives && Array.isArray(data.alternatives)) {
              products = data.alternatives;
            } else if (data.products && Array.isArray(data.products)) {
              products = data.products;
            }
            
            console.log(`[FRONTEND] Extracted ${products.length} products:`, products);
            
            if (products.length > 0) {
              parsed.products = products.map((item, index) => {
                console.log(`[FRONTEND] Processing item ${index}:`, item);
                
                // Extract name with multiple fallbacks
                const productName = item['Product Name'] || item.ProductName || item.name || item.title || `Product ${index + 1}`;
                
                // Extract store with multiple fallbacks  
                const storeName = item['Product Store'] || item.ProductStore || item.store || item.retailer || 'Online Store';
                
                // Extract price from string values like "$1599"
                const priceValue = item['Product Price'] || item.ProductPrice || item.price || item.cost || '0';
                let price = 0;
                let priceDisplay = '$0.00';
                
                if (typeof priceValue === 'number') {
                  price = priceValue;
                  priceDisplay = `$${price.toFixed(2)}`;
                } else if (typeof priceValue === 'string') {
                  // Remove $ and parse number
                  const cleanPrice = priceValue.replace(/[$,\s]/g, '');
                  const parsedPrice = parseFloat(cleanPrice);
                  if (!isNaN(parsedPrice)) {
                    price = parsedPrice;
                    priceDisplay = priceValue.includes('$') ? priceValue : `$${parsedPrice.toFixed(2)}`;
                  } else {
                    priceDisplay = priceValue;
                  }
                  
                  console.log(`[FRONTEND] Price "${priceValue}" -> ${price} (display: ${priceDisplay})`);
                }
                
                const processedItem = {
                  name: productName,
                  store: storeName,
                  price: price,
                  priceDisplay: priceDisplay,
                  originalPrice: item.originalPrice || item['Original Price'] || null,
                  savings: item.savings || item['Savings'] || null,
                  url: item['Product URL'] || item.ProductURL || item.url || item.link || null,
                  productImageUrl: item['Product Image URL'] || item.ProductImageURL || item.productImageUrl || item.imageUrl || null,
                  storeImageUrl: item['Product Store Image URL'] || item.ProductStoreImageURL || item['Product store Image URL'] || item.storeImageUrl || null,
                  rating: item.rating || item['Rating'] || null,
                  description: item.description || item.ProductDescription || item['Product Description'] || null,
                  availability: item.availability || item.inStock || item['In Stock'] || null
                };
                
                // Debug the processed item
                console.log(`[FRONTEND] Final processed item ${index}:`, {
                  name: processedItem.name,
                  store: processedItem.store,
                  price: processedItem.price,
                  priceDisplay: processedItem.priceDisplay
                });
                
                return processedItem;
              });
              
              console.log(`[FRONTEND] Successfully created ${parsed.products.length} product objects`);
            }
           } catch (e) {
             console.error(`[FRONTEND] JSON parsing failed:`, e);
             console.error(`[FRONTEND] Failed JSON content:`, jsonText);
             // Don't let this error bubble up - continue with empty products array
           }
         } else {
           console.warn(`[FRONTEND] No JSON found in analysis text`);
         }

         // Strategy 1b: Look for discount/coupon information
         // First try structured format
         const discountSection = analysisText.match(/(?:Mention 3 Coupons and Discounts|3 Coupons and Discounts)[\s\S]*?(?=\n\n|\n[A-Z]|$)/i);
         if (discountSection) {
           const discountText = discountSection[0];
           const discountBlocks = discountText.split(/Discount Title:/i).slice(1);
           
           if (discountBlocks.length > 0) {
             parsed.discounts = discountBlocks.map(block => {
               const titleMatch = block.match(/^([^\n]*)/);
               const descMatch = block.match(/Discount Description:\s*([^\n]*)/i);
               const storeMatch = block.match(/Discount Store:\s*([^\n]*)/i);
               const imageMatch = block.match(/Discount Store Image URL[^\n]*:\s*([^\n]*)/i);
               
               return {
                 title: titleMatch ? titleMatch[1].trim() : '',
                 description: descMatch ? descMatch[1].trim() : '',
                 store: storeMatch ? storeMatch[1].trim() : 'Various Stores',
                 storeImageUrl: imageMatch ? imageMatch[1].trim() : null
               };
             }).filter(discount => discount.title);
             
             console.log(`[FRONTEND] Successfully parsed ${parsed.discounts.length} structured discounts`);
           }
         }

         // Try JSON discount blocks - look for arrays with "Discount Title" 
         if (parsed.discounts.length === 0) {
           for (const block of allJsonBlocks) {
             const cleanJson = block.replace(/```json|```/g, '').trim();
             try {
               const data = JSON.parse(cleanJson);
               
               // Check if this looks like discount data - should have "Discount Title" and NOT "Product Name"
               if (Array.isArray(data) && data.length > 0 && 
                   data[0]['Discount Title'] &&
                   !data[0]['Product Name']) {
                 parsed.discounts = data.map(item => ({
                   title: item['Discount Title'] || '',
                   description: item['Discount Description'] || '',
                   store: item['Discount Store'] || 'Various Stores',
                   storeImageUrl: item['Discount Store Image URL'] || null
                 }));
                 console.log(`[FRONTEND] Successfully parsed ${parsed.discounts.length} JSON discounts`);
                 break;
               }
             } catch (e) {
               // Continue to next block
             }
           }
         }

         // Fallback: Look for any discount mentions in text
         if (parsed.discounts.length === 0) {
           const discountLines = analysisText.split('\n').filter(line => 
             /(?:save|discount|coupon|off|promo)/i.test(line) && line.trim().length > 20
           );
           
           if (discountLines.length > 0) {
             parsed.discounts = discountLines.slice(0, 3).map((line, index) => ({
               title: `Savings Opportunity ${index + 1}`,
               description: line.trim(),
               store: 'Multiple Stores',
               storeImageUrl: null
             }));
             console.log(`[FRONTEND] Found ${parsed.discounts.length} discount mentions from text`);
           }
         }
         
         console.log(`[FRONTEND] Final parsing result - products:`, parsed.products?.length || 0);

        // Strategy 2: Extract recommendation
        const lines = analysisText.split('\n');
        const recommendationKeywords = ['recommendation', 'should', 'buy', 'consider', 'suggest', 'advice'];
        
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i].toLowerCase();
          if (recommendationKeywords.some(keyword => line.includes(keyword))) {
            const startIdx = i;
            let endIdx = i;
            
            // Find the end of the recommendation section
            while (endIdx < lines.length - 1 && 
                   !lines[endIdx + 1].match(/^\d+\.|\*\*|\#\#|```/)) {
              endIdx++;
            }
            
            parsed.recommendation = lines.slice(startIdx, endIdx + 1)
              .join(' ')
              .replace(/^(recommendation|conclusion)[:\s]*/i, '')
              .trim();
            break;
          }
        }

        // Strategy 3: Extract structured data using regex
        if (parsed.products.length === 0) {
          const productPattern = /(?:product|item)[:\s]*([^\n]+)[\s\S]*?(?:store|retailer)[:\s]*([^\n]+)[\s\S]*?(?:price|cost)[:\s]*\$?(\d+(?:\.\d{2})?)/gi;
          let match;
          
          while ((match = productPattern.exec(analysisText)) !== null) {
            parsed.products.push({
              name: match[1].trim(),
              store: match[2].trim(),
              price: parseFloat(match[3]),
              originalPrice: null,
              savings: null
            });
          }
        }

                 // Strategy 4: Extract price information from text as LAST RESORT
         if (parsed.products.length === 0) {
           console.log(`[FRONTEND] No products found in JSON, trying text extraction as fallback`);
           const pricePattern = /\$(\d+(?:\.\d{2})?)/g;
           const storePattern = /(amazon|walmart|best buy|target|costco|ebay|newegg|apple|microsoft|dell|hp)/gi;
           
           const prices = [...analysisText.matchAll(pricePattern)].map(m => parseFloat(m[1]));
           const stores = [...analysisText.matchAll(storePattern)].map(m => m[1]);
           
           if (prices.length > 0) {
             for (let i = 0; i < Math.min(prices.length, 3); i++) {
               parsed.products.push({
                 name: `Alternative Product ${i + 1}`,
                 store: stores[i] || 'Online Store',
                 price: prices[i],
                 priceDisplay: `$${prices[i].toFixed(2)}`,
                 originalPrice: null,
                 savings: null,
                 url: null,
                 productImageUrl: null,
                 storeImageUrl: null,
                 rating: null,
                 description: null,
                 availability: null
               });
             }
             console.log(`[FRONTEND] Created ${parsed.products.length} fallback products from text`);
           }
         }

        // Generate summary
        if (parsed.products.length > 0) {
          const avgPrice = parsed.products.reduce((sum, p) => sum + p.price, 0) / parsed.products.length;
          const minPrice = Math.min(...parsed.products.map(p => p.price));
          const maxPrice = Math.max(...parsed.products.map(p => p.price));
          
          parsed.summary = `Found ${parsed.products.length} alternatives ranging from $${minPrice.toFixed(2)} to $${maxPrice.toFixed(2)}`;
        }

             } catch (error) {
         console.error('[FRONTEND] Error parsing AI response:', error);
       }

       console.log(`[FRONTEND] Parsing complete. Found ${parsed.products.length} products, recommendation: ${!!parsed.recommendation}`);
       return parsed;
     }

    // Store logo mapping for major retailers
    function getStoreLogoUrl(storeName) {
      const store = storeName.toLowerCase().trim();
      
      // Try Clearbit API first (correct URL format)
      const clearbitUrl = `https://logo.clearbit.com/${getDomainFromStore(store)}`;
      
      // Fallback to reliable Wikipedia logos
      const logoMap = {
        'amazon': 'https://upload.wikimedia.org/wikipedia/commons/a/a9/Amazon_logo.svg',
        'walmart': 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Walmart_logo.svg',
        'target': 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Target_logo.svg',
        'best buy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'bestbuy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'dell': 'https://upload.wikimedia.org/wikipedia/commons/4/48/Dell_Logo.svg',
        'hp': 'https://upload.wikimedia.org/wikipedia/commons/a/ad/HP_logo_2012.svg',
        'microsoft': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'microsoft store': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'apple': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'apple store': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'costco': 'https://upload.wikimedia.org/wikipedia/commons/5/59/Costco_Wholesale_logo_2010-10-26.svg',
        'ebay': 'https://upload.wikimedia.org/wikipedia/commons/1/1b/EBay_logo.svg',
        'newegg': 'https://upload.wikimedia.org/wikipedia/commons/0/07/Newegg_logo.svg',
        'home depot': 'https://upload.wikimedia.org/wikipedia/commons/5/5f/TheHomeDepot.svg',
        'homedepot': 'https://upload.wikimedia.org/wikipedia/commons/5/5f/TheHomeDepot.svg',
        'lowes': 'https://upload.wikimedia.org/wikipedia/commons/c/cc/Lowe%27s_logo.svg',
        'lowe\'s': 'https://upload.wikimedia.org/wikipedia/commons/c/cc/Lowe%27s_logo.svg',
        'kroger': 'https://upload.wikimedia.org/wikipedia/commons/4/4b/Kroger_logo.svg',
        'safeway': 'https://upload.wikimedia.org/wikipedia/commons/8/8a/Safeway_logo.svg',
        'cvs': 'https://upload.wikimedia.org/wikipedia/commons/6/68/CVS_Pharmacy_logo.svg',
        'walgreens': 'https://upload.wikimedia.org/wikipedia/commons/6/60/Walgreens_logo.svg',
        'rite aid': 'https://upload.wikimedia.org/wikipedia/commons/2/2b/Rite_Aid_logo.svg',
        'riteaid': 'https://upload.wikimedia.org/wikipedia/commons/2/2b/Rite_Aid_logo.svg',
        'macy\'s': 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Macy%27s_logo.svg',
        'macys': 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Macy%27s_logo.svg',
        'jcpenney': 'https://upload.wikimedia.org/wikipedia/commons/7/7b/JCPenney_logo.svg',
        'kohl\'s': 'https://upload.wikimedia.org/wikipedia/commons/9/9b/Kohl%27s_logo.svg',
        'kohls': 'https://upload.wikimedia.org/wikipedia/commons/9/9b/Kohl%27s_logo.svg',
        'sears': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Sears_logo.svg',
        'gamestop': 'https://upload.wikimedia.org/wikipedia/commons/6/6e/GameStop_logo.svg',
        'staples': 'https://upload.wikimedia.org/wikipedia/commons/6/6e/Staples_logo.svg',
        'office depot': 'https://upload.wikimedia.org/wikipedia/commons/9/9e/Office_Depot_logo.svg',
        'officedepot': 'https://upload.wikimedia.org/wikipedia/commons/9/9e/Office_Depot_logo.svg',
        'petco': 'https://upload.wikimedia.org/wikipedia/commons/0/0f/Petco_logo.svg',
        'petsmart': 'https://upload.wikimedia.org/wikipedia/commons/6/6f/PetSmart_logo.svg',
        'bed bath beyond': 'https://upload.wikimedia.org/wikipedia/commons/3/3c/Bed_Bath_%26_Beyond_logo.svg',
        'bath body works': 'https://upload.wikimedia.org/wikipedia/commons/4/4b/Bath_%26_Body_Works_logo.svg',
        'victoria secret': 'https://upload.wikimedia.org/wikipedia/commons/f/fd/Victoria%27s_Secret_logo.svg',
        'tj maxx': 'https://upload.wikimedia.org/wikipedia/commons/1/1c/T.J._Maxx_logo.svg',
        'tjmaxx': 'https://upload.wikimedia.org/wikipedia/commons/1/1c/T.J._Maxx_logo.svg',
        'marshalls': 'https://upload.wikimedia.org/wikipedia/commons/2/29/Marshalls_logo.svg',
        'nordstrom': 'https://upload.wikimedia.org/wikipedia/commons/1/1b/Nordstrom_logo.svg',
        'gap': 'https://upload.wikimedia.org/wikipedia/commons/4/44/Gap_logo.svg',
        'old navy': 'https://upload.wikimedia.org/wikipedia/commons/7/7e/Old_Navy_logo.svg',
        'oldnavy': 'https://upload.wikimedia.org/wikipedia/commons/7/7e/Old_Navy_logo.svg',
        'banana republic': 'https://upload.wikimedia.org/wikipedia/commons/a/a7/Banana_Republic_logo.svg',
        'express': 'https://upload.wikimedia.org/wikipedia/commons/3/3e/Express_logo.svg',
        'h&m': 'https://upload.wikimedia.org/wikipedia/commons/5/53/H%26M-Logo.svg',
        'forever 21': 'https://upload.wikimedia.org/wikipedia/commons/4/44/Forever_21_logo.svg',
        'forever21': 'https://upload.wikimedia.org/wikipedia/commons/4/44/Forever_21_logo.svg',
        'zara': 'https://upload.wikimedia.org/wikipedia/commons/f/fd/Zara_Logo.svg',
        'uniqlo': 'https://upload.wikimedia.org/wikipedia/commons/9/92/UNIQLO_logo.svg',
        'nike': 'https://upload.wikimedia.org/wikipedia/commons/a/a6/Logo_NIKE.svg',
        'adidas': 'https://upload.wikimedia.org/wikipedia/commons/2/20/Adidas_Logo.svg',
        'foot locker': 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Foot_Locker_logo.svg',
        'footlocker': 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Foot_Locker_logo.svg',
        'dick\'s sporting goods': 'https://upload.wikimedia.org/wikipedia/commons/d/d6/Dick%27s_Sporting_Goods_logo.svg',
        'dicks': 'https://upload.wikimedia.org/wikipedia/commons/d/d6/Dick%27s_Sporting_Goods_logo.svg',
        'barnes noble': 'https://upload.wikimedia.org/wikipedia/commons/c/c0/Barnes_%26_Noble_logo.svg',
        'barnes & noble': 'https://upload.wikimedia.org/wikipedia/commons/c/c0/Barnes_%26_Noble_logo.svg',
        'toys r us': 'https://upload.wikimedia.org/wikipedia/commons/2/2e/Toys_R_Us_logo.svg',
        'toysrus': 'https://upload.wikimedia.org/wikipedia/commons/2/2e/Toys_R_Us_logo.svg',
        'radio shack': 'https://upload.wikimedia.org/wikipedia/commons/a/a5/RadioShack_logo.svg',
        'radioshack': 'https://upload.wikimedia.org/wikipedia/commons/a/a5/RadioShack_logo.svg',
        'circuit city': 'https://upload.wikimedia.org/wikipedia/commons/1/1c/Circuit_City_logo.svg',
        'frys': 'https://upload.wikimedia.org/wikipedia/commons/4/4a/Frys_logo.svg',
        'micro center': 'https://upload.wikimedia.org/wikipedia/commons/5/5a/Micro_Center_logo.svg',
        'microcenter': 'https://upload.wikimedia.org/wikipedia/commons/5/5a/Micro_Center_logo.svg',
        'bose': 'https://upload.wikimedia.org/wikipedia/commons/7/7b/Bose_logo.svg',
        'meta': 'https://upload.wikimedia.org/wikipedia/commons/7/7b/Meta_Platforms_Inc._logo.svg',
        'facebook': 'https://upload.wikimedia.org/wikipedia/commons/7/7b/Meta_Platforms_Inc._logo.svg',
        'sony': 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Sony_logo.svg',
        'samsung': 'https://upload.wikimedia.org/wikipedia/commons/2/24/Samsung_Logo.svg',
        'lg': 'https://upload.wikimedia.org/wikipedia/commons/2/20/LG_logo_%282015%29.svg',
        'panasonic': 'https://upload.wikimedia.org/wikipedia/commons/0/0a/Panasonic_logo_%28Blue%29.svg',
        'canon': 'https://upload.wikimedia.org/wikipedia/commons/0/0b/Canon_logo.svg',
        'nikon': 'https://upload.wikimedia.org/wikipedia/commons/7/7b/Nikon_logo.svg',
        'gopro': 'https://upload.wikimedia.org/wikipedia/commons/4/4a/GoPro_logo.svg',
        'fitbit': 'https://upload.wikimedia.org/wikipedia/commons/f/f3/Fitbit_logo.svg',
        'garmin': 'https://upload.wikimedia.org/wikipedia/commons/5/5a/Garmin_logo.svg',
        'logitech': 'https://upload.wikimedia.org/wikipedia/commons/1/1e/Logitech_logo_%282015%29.svg',
        'razer': 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Razer_logo.svg',
        'corsair': 'https://upload.wikimedia.org/wikipedia/commons/f/f8/Corsair_logo.svg',
        'alienware': 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Alienware_logo.svg',
        'asus': 'https://upload.wikimedia.org/wikipedia/commons/2/2e/ASUS_logo.svg',
        'msi': 'https://upload.wikimedia.org/wikipedia/commons/c/c0/MSI_logo.svg',
        'acer': 'https://upload.wikimedia.org/wikipedia/commons/0/00/Acer_logo.svg',
        'lenovo': 'https://upload.wikimedia.org/wikipedia/commons/b/b8/Lenovo_logo.svg',
        'toshiba': 'https://upload.wikimedia.org/wikipedia/commons/1/1e/Toshiba_logo.svg',
        'philips': 'https://upload.wikimedia.org/wikipedia/commons/5/52/Philips_logo.svg',
        'google': 'https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg',
        'google store': 'https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg',
        'youtube': 'https://upload.wikimedia.org/wikipedia/commons/0/09/YouTube_full-color_icon_%282017%29.svg',
        'twitter': 'https://upload.wikimedia.org/wikipedia/commons/6/6f/Logo_of_Twitter.svg',
        'x': 'https://upload.wikimedia.org/wikipedia/commons/5/5a/X_icon_2.svg',
        'instagram': 'https://upload.wikimedia.org/wikipedia/commons/a/a5/Instagram_icon.png',
        'snapchat': 'https://upload.wikimedia.org/wikipedia/commons/c/ce/Snapchat_logo.svg',
        'tiktok': 'https://upload.wikimedia.org/wikipedia/commons/3/34/Ionicons_logo-tiktok.svg',
        'spotify': 'https://upload.wikimedia.org/wikipedia/commons/1/19/Spotify_logo_without_text.svg',
        'netflix': 'https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg',
        'disney': 'https://upload.wikimedia.org/wikipedia/commons/3/3e/Disney%2B_logo.svg',
        'disney+': 'https://upload.wikimedia.org/wikipedia/commons/3/3e/Disney%2B_logo.svg',
        'hulu': 'https://upload.wikimedia.org/wikipedia/commons/e/e4/Hulu_Logo.svg',
        'paramount+': 'https://upload.wikimedia.org/wikipedia/commons/a/a5/Paramount_Plus_logo.svg',
        'hbo': 'https://upload.wikimedia.org/wikipedia/commons/d/de/HBO_logo.svg',
        'roku': 'https://upload.wikimedia.org/wikipedia/commons/7/7c/Roku_logo.svg',
        'steam': 'https://upload.wikimedia.org/wikipedia/commons/8/83/Steam_icon_logo.svg',
        'epic games': 'https://upload.wikimedia.org/wikipedia/commons/3/31/Epic_Games_logo.svg',
        'nvidia': 'https://upload.wikimedia.org/wikipedia/commons/2/21/Nvidia_logo.svg',
        'amd': 'https://upload.wikimedia.org/wikipedia/commons/7/7c/AMD_Logo.svg',
        'intel': 'https://upload.wikimedia.org/wikipedia/commons/c/c9/Intel-logo.svg',
        'oculus': 'https://upload.wikimedia.org/wikipedia/commons/a/a4/Oculus_logo.svg',
        'playstation': 'https://upload.wikimedia.org/wikipedia/commons/0/00/PlayStation_logo.svg',
        'xbox': 'https://upload.wikimedia.org/wikipedia/commons/f/f9/Xbox_one_logo.svg',
        'nintendo': 'https://upload.wikimedia.org/wikipedia/commons/0/0d/Nintendo.svg',
        'tesla': 'https://upload.wikimedia.org/wikipedia/commons/e/e8/Tesla_logo.png',
        'uber': 'https://upload.wikimedia.org/wikipedia/commons/c/cc/Uber_logo_2018.png',
        'lyft': 'https://upload.wikimedia.org/wikipedia/commons/a/a0/Lyft_logo.svg',
        'airbnb': 'https://upload.wikimedia.org/wikipedia/commons/6/69/Airbnb_Logo_B%C3%A9lo.svg',
        'booking': 'https://upload.wikimedia.org/wikipedia/commons/b/be/Booking.com_logo.svg',
        'expedia': 'https://upload.wikimedia.org/wikipedia/commons/2/2e/Expedia_logo.svg',
        'priceline': 'https://upload.wikimedia.org/wikipedia/commons/1/1f/Priceline.com_Logo.svg'
      };
      
             // Return Clearbit URL first, fallback handled by error handlers
       return clearbitUrl;
    }

    function getDomainFromStore(storeName) {
      const domainMap = {
        'amazon': 'amazon.com',
        'walmart': 'walmart.com',
        'target': 'target.com',
        'best buy': 'bestbuy.com',
        'bestbuy': 'bestbuy.com',
        'dell': 'dell.com',
        'hp': 'hp.com',
        'microsoft': 'microsoft.com',
        'microsoft store': 'microsoft.com',
        'apple': 'apple.com',
        'apple store': 'apple.com',
        'costco': 'costco.com',
        'ebay': 'ebay.com',
        'newegg': 'newegg.com',
        'bose': 'bose.com',
        'meta': 'meta.com',
        'facebook': 'facebook.com',
        'sony': 'sony.com',
        'samsung': 'samsung.com',
        'lg': 'lg.com',
        'panasonic': 'panasonic.com',
        'canon': 'canon.com',
        'nikon': 'nikon.com',
        'gopro': 'gopro.com',
        'fitbit': 'fitbit.com',
        'garmin': 'garmin.com',
        'logitech': 'logitech.com',
        'razer': 'razer.com',
        'corsair': 'corsair.com',
        'alienware': 'alienware.com',
        'asus': 'asus.com',
        'msi': 'msi.com',
        'acer': 'acer.com',
        'lenovo': 'lenovo.com',
        'toshiba': 'toshiba.com',
        'philips': 'philips.com',
        'google': 'google.com',
        'google store': 'store.google.com',
        'youtube': 'youtube.com',
        'twitter': 'twitter.com',
        'x': 'x.com',
        'instagram': 'instagram.com',
        'snapchat': 'snapchat.com',
        'tiktok': 'tiktok.com',
        'spotify': 'spotify.com',
        'netflix': 'netflix.com',
        'disney': 'disney.com',
        'disney+': 'disneyplus.com',
        'hulu': 'hulu.com',
        'paramount+': 'paramountplus.com',
        'hbo': 'hbo.com',
        'roku': 'roku.com',
        'steam': 'store.steampowered.com',
        'epic games': 'epicgames.com',
        'nvidia': 'nvidia.com',
        'amd': 'amd.com',
        'intel': 'intel.com',
        'oculus': 'oculus.com',
        'playstation': 'playstation.com',
        'xbox': 'xbox.com',
        'nintendo': 'nintendo.com',
        'tesla': 'tesla.com',
        'uber': 'uber.com',
        'lyft': 'lyft.com',
        'airbnb': 'airbnb.com',
        'booking': 'booking.com',
        'expedia': 'expedia.com',
        'priceline': 'priceline.com'
      };
      
      return domainMap[storeName.toLowerCase()] || `${storeName.toLowerCase()}.com`;
    }

    function getStoreLogoFallback(storeName) {
      const store = storeName.toLowerCase().trim();
      const logoMap = {
        'amazon': 'https://upload.wikimedia.org/wikipedia/commons/a/a9/Amazon_logo.svg',
        'walmart': 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Walmart_logo.svg',
        'target': 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Target_logo.svg',
        'best buy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'bestbuy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'dell': 'https://upload.wikimedia.org/wikipedia/commons/4/48/Dell_Logo.svg',
        'hp': 'https://upload.wikimedia.org/wikipedia/commons/a/ad/HP_logo_2012.svg',
        'microsoft': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'microsoft store': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'apple': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'apple store': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'costco': 'https://upload.wikimedia.org/wikipedia/commons/5/59/Costco_Wholesale_logo_2010-10-26.svg',
        'ebay': 'https://upload.wikimedia.org/wikipedia/commons/1/1b/EBay_logo.svg',
        'newegg': 'https://upload.wikimedia.org/wikipedia/commons/0/07/Newegg_logo.svg'
      };
      
      return logoMap[store] || null;
    }

    // Generate fallback product image based on category
    function getProductPlaceholder(productName) {
      const name = productName.toLowerCase();
      
      if (name.includes('phone') || name.includes('mobile') || name.includes('smartphone')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <rect x="5" y="2" width="14" height="20" rx="2" ry="2"/>
          <line x1="12" y1="18" x2="12.01" y2="18"/>
        </svg>`;
      } else if (name.includes('laptop') || name.includes('computer') || name.includes('pc')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
          <line x1="8" y1="21" x2="16" y2="21"/>
          <line x1="12" y1="17" x2="12" y2="21"/>
        </svg>`;
      } else if (name.includes('headphone') || name.includes('earphone') || name.includes('audio')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <path d="M3 18v-6a9 9 0 0 1 18 0v6"/>
          <path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"/>
        </svg>`;
      } else if (name.includes('book') || name.includes('magazine')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
        </svg>`;
      } else {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"/>
          <line x1="3" y1="6" x2="21" y2="6"/>
          <path d="M16 10a4 4 0 0 1-8 0"/>
        </svg>`;
      }
    }

    // Image error handling functions
    function handleProductImageError(elementId, productName) {
      console.log(`[FRONTEND] Product image failed for: ${productName}`);
      const element = document.getElementById(elementId);
      if (element) {
        element.innerHTML = `<div class="product-placeholder">${getProductPlaceholder(productName)}</div>`;
      }
    }

    function handleStoreLogoError(elementId, storeName) {
      console.log(`[FRONTEND] Store logo failed for: ${storeName}, trying fallback`);
      const element = document.getElementById(elementId);
      if (element) {
        const fallbackUrl = getStoreLogoFallback(storeName);
        if (fallbackUrl) {
          // Try Wikipedia fallback
          element.innerHTML = `
            <img src="${fallbackUrl}" alt="${storeName}" class="store-logo" 
                 onload="console.log('Fallback logo loaded: ${storeName}')"
                 onerror="handleStoreLogoFinalError('${elementId}', '${storeName}')">
            <span class="store-name">${storeName}</span>
          `;
        } else {
          handleStoreLogoFinalError(elementId, storeName);
        }
      }
    }

    function handleStoreLogoFinalError(elementId, storeName) {
      console.log(`[FRONTEND] All store logos failed for: ${storeName}, using icon`);
      const element = document.getElementById(elementId);
      if (element) {
        element.innerHTML = `
          <div class="store-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
              <polyline points="9,22 9,12 15,12 15,22"/>
            </svg>
          </div>
          <span class="store-name">${storeName}</span>
        `;
      }
    }

    // Nearby stores functionality
    async function findNearbyStores(storeName, productName) {
      console.log(`[FRONTEND] Finding nearby stores for: ${storeName}`);
      
      // Get all find nearby buttons and disable them
      const buttons = document.querySelectorAll('.find-nearby-button');
      buttons.forEach(btn => {
        btn.disabled = true;
        btn.innerHTML = '<span>📍 Searching...</span>';
      });

      try {
        // Get user's location
        const position = await new Promise((resolve, reject) => {
          if (!navigator.geolocation) {
            reject(new Error('Geolocation is not supported'));
          return;
        }
          
          navigator.geolocation.getCurrentPosition(resolve, reject, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 300000 // 5 minutes
          });
        });

        const { latitude, longitude } = position.coords;
        console.log(`[FRONTEND] User location: ${latitude}, ${longitude}`);

        // Call backend API to find nearby stores
        const response = await fetch('/api/nearby-stores', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            storeName: storeName,
            latitude: latitude,
            longitude: longitude
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to find nearby stores');
        }

        const data = await response.json();
        console.log(`[FRONTEND] Found ${data.stores.length} nearby stores`);

        // Show the stores in a modal
        showNearbyStoresModal(storeName, productName, data.stores);

      } catch (error) {
        console.error('[FRONTEND] Error finding nearby stores:', error);
        
        // Show error message
        const errorMsg = error.message.includes('User denied') 
          ? 'Location access denied. Please enable location services and try again.'
          : `Error finding stores: ${error.message}`;
          
        alert(errorMsg);
      } finally {
        // Re-enable buttons
        buttons.forEach(btn => {
          btn.disabled = false;
          btn.innerHTML = `
            <span class="mobile-text">📍 Near</span>
            <span class="desktop-text">📍 Find Near Me</span>
          `;
        });
      }
    }

    function showNearbyStoresModal(storeName, productName, stores) {
      // Remove existing modal if present
      const existingModal = document.getElementById('nearby-stores-modal');
      if (existingModal) {
        existingModal.remove();
      }

      // Create modal
      const modal = document.createElement('div');
      modal.id = 'nearby-stores-modal';
      modal.className = 'nearby-stores-modal';
      
      const modalContent = `
        <div class="nearby-stores-content">
          <div class="nearby-stores-header">
            <div class="nearby-stores-title">${storeName} Stores Near You</div>
            <button class="close-modal" onclick="closeNearbyStoresModal()">&times;</button>
          </div>
          <div class="nearby-stores-list">
            ${stores.length > 0 ? stores.map((store, index) => `
              <div class="store-location">
                <div class="store-location-info">
                  <div class="store-location-name">${store.name}</div>
                  <div class="store-location-address">${store.address}</div>
                  <div class="store-location-meta">
                    <span class="store-distance">${store.distance} miles</span>
                    ${store.rating ? `
                      <span class="store-rating">
                        ⭐ ${store.rating}/5
                      </span>
                    ` : ''}
                    ${store.isOpen !== null ? `
                      <span class="store-status ${store.isOpen ? 'open' : 'closed'}">
                        ${store.isOpen ? '🟢 Open' : '🔴 Closed'}
                      </span>
                    ` : ''}
                  </div>
                </div>
                <div class="store-actions">
                  <a href="https://www.google.com/maps/dir/?api=1&destination=${store.latitude},${store.longitude}" 
                     target="_blank" class="directions-button">
                    Get Directions
                  </a>
                </div>
              </div>
            `).join('') : `
              <div style="text-align: center; padding: 40px; color: var(--text-tertiary);">
                <div style="font-size: 48px; margin-bottom: 16px;">🏪</div>
                <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px;">No ${storeName} stores found nearby</div>
                <div>Try searching for a different store or expand your search radius</div>
              </div>
            `}
          </div>
        </div>
      `;
      
      modal.innerHTML = modalContent;
      
      // Add click outside to close
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeNearbyStoresModal();
        }
      });
      
      document.body.appendChild(modal);
    }

    function closeNearbyStoresModal() {
      const modal = document.getElementById('nearby-stores-modal');
      if (modal) {
        modal.remove();
      }
    }

    function showNearbyStoresForProduct(stores, productName) {
      if (!stores || stores.length === 0) return;
      
      const nearbyStoresList = document.getElementById('nearby-stores-list');
      
      nearbyStoresList.innerHTML = stores.slice(0, 4).map(store => `
        <div class="nearby-store-card">
          <div class="store-logo-container">
            <img src="${getStoreLogoUrl(store)}" alt="${store}" class="nearby-store-logo" onerror="this.style.display='none'">
          </div>
          <div class="nearby-store-name">${store}</div>
          <a href="#" class="nearby-store-action" onclick="findNearbyStores('${store}', '${productName}'); return false;">
            Find Locations
          </a>
        </div>
      `).join('');
      
      document.getElementById('nearby-stores-section').style.display = 'block';
    }

    // Enhanced photo management with request throttling
    let isCheckingPhotos = false;
    let pollInterval = null;
    
    async function checkForPhotos() {
      // Prevent concurrent requests
      if (isCheckingPhotos) {
        console.log('[FRONTEND] Skipping photo check - already in progress');
        return;
      }
      
      isCheckingPhotos = true;
      
      try {
        const response = await fetch('/api/photos');

        if (!response.ok) {
          if (response.status === 401) {
            showEmptyState('Authentication Required', 'Please open this page from the MentraOS app');
            return;
          }
          throw new Error('Failed to fetch photos');
        }

        const data = await response.json();
        
        if (data.photos && data.photos.length > 0) {
          currentPhotos = data.photos;
          updatePhotoCatalogue();
          
          // Auto-select latest photo if none selected
          if (currentPhotoIndex === -1) {
            selectPhoto(currentPhotos.length - 1);
          }
          
          // Check for analysis updates (less frequently)
          checkForAnalysisUpdates();
        } else {
          showEmptyState('No Photos', 'Take photos with your Mentra glasses to begin intelligent price analysis');
        }
      } catch (error) {
        console.error('Error checking for photos:', error);
        showEmptyState('Connection Error', 'Unable to connect to the service. Please check your connection.');
      } finally {
        isCheckingPhotos = false;
      }
    }

    function updatePhotoCatalogue() {
      const catalogue = document.getElementById('photo-catalogue');
      
      if (currentPhotos.length === 0) {
        showEmptyState('No Photos', 'Take photos with your Mentra glasses to begin intelligent price analysis');
        return;
      }

      catalogue.innerHTML = currentPhotos.map((photo, index) => `
        <div class="photo-item ${index === currentPhotoIndex ? 'active' : ''}" 
             onclick="selectPhoto(${index})" 
             data-index="${index}">
          <img src="/api/photo/${photo.requestId}" alt="Product ${index + 1}" />
          <div class="photo-overlay">
            <div class="photo-meta">
              <span class="analysis-badge ${photo.hasAnalysis ? 'complete' : 'pending'}">
                ${photo.hasAnalysis ? 'Analyzed' : 'Processing'}
              </span>
            </div>
          </div>
        </div>
      `).join('');
    }

    function selectPhoto(index) {
      // Cancel any existing analysis requests
      console.log(`[FRONTEND] Selecting photo ${index}, canceling previous requests`);
      activeAnalysisRequests.forEach((controller, requestId) => {
        console.log(`[FRONTEND] Canceling analysis request for ${requestId}`);
        controller.abort();
      });
      activeAnalysisRequests.clear();
      
      currentPhotoIndex = index;
      updatePhotoCatalogue();
      displaySelectedPhoto();
      
      const photo = currentPhotos[index];
      if (photo.hasAnalysis) {
        loadAnalysis(photo.requestId);
      } else {
        showAnalysisLoading();
        // Initialize tracking for this request
        activeAnalysisRequests.set(photo.requestId, new AbortController());
        checkForAnalysis(photo.requestId);
      }
    }

    function displaySelectedPhoto() {
      const mainDisplay = document.getElementById('main-display');
      const photo = currentPhotos[currentPhotoIndex];
      
      mainDisplay.innerHTML = `
        <div class="photo-display">
          <img src="/api/photo/${photo.requestId}" alt="Selected Product" />
          <div class="processing-overlay">
            <div class="processing-indicator">
              <div class="processing-spinner"></div>
              <div class="processing-text">AI Analysis in Progress</div>
              <div class="processing-subtitle">Finding the best prices for you...</div>
            </div>
          </div>
        </div>
        <div id="product-name-section" class="product-name-section" style="display: none;">
          <h1 id="main-product-name" class="main-product-name"></h1>
        </div>
        <div id="nearby-stores-section" class="nearby-stores-section" style="display: none;">
          <h3 class="nearby-stores-title">Available Near You</h3>
          <div id="nearby-stores-list" class="nearby-stores-quick-list"></div>
        </div>
      `;
    }

    function showAnalysisLoading() {
      const globalStatus = document.getElementById('global-status');
      globalStatus.className = 'status-pill analyzing pulse';
      globalStatus.innerHTML = '<div class="status-spinner"></div> Analyzing...';
      
      const analysisSection = document.getElementById('analysis-section');
      analysisSection.style.display = 'flex';
      analysisSection.innerHTML = `
        <div class="panel glass-elevated">
          <div class="panel-header">
            <div class="panel-title">Analyzing Product</div>
            <div class="panel-subtitle">Processing with AI...</div>
          </div>
          <div class="panel-content">
            <div class="empty-state">
              <div class="empty-icon pulse">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
                  <polyline points="3.27,6.96 12,12.01 20.73,6.96"/>
                  <line x1="12" y1="22.08" x2="12" y2="12"/>
                </svg>
              </div>
              <div class="empty-title">AI Analysis in Progress</div>
              <div class="empty-subtitle">Our advanced algorithms are analyzing your product and comparing market prices</div>
            </div>
          </div>
        </div>
      `;
    }

         async function checkForAnalysis(requestId, retryCount = 0) {
       try {
         console.log(`[FRONTEND] Checking for analysis for requestId: ${requestId} (attempt ${retryCount + 1})`);
         
         // Check if this request was cancelled
         if (!activeAnalysisRequests.has(requestId) && retryCount > 0) {
           console.log(`[FRONTEND] Analysis request ${requestId} was cancelled, stopping`);
           return;
         }
         
         // Update processing text based on retry count
         const processingOverlay = document.querySelector('.processing-overlay .processing-text');
         if (processingOverlay) {
           const messages = [
             'AI Analysis in Progress',
             'Deep Learning Analysis', 
             'Scanning Market Prices',
             'Comparing Best Deals',
             'Finalizing Results'
           ];
           processingOverlay.textContent = messages[Math.min(retryCount, messages.length - 1)];
         }
         
         // Add a timeout to prevent hanging requests
         const controller = new AbortController();
         activeAnalysisRequests.set(requestId, controller);
         const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
         
         const response = await fetch(`/api/analysis/${requestId}`, {
           signal: controller.signal
         });
         
         clearTimeout(timeoutId);
         activeAnalysisRequests.delete(requestId);
         console.log(`[FRONTEND] Analysis response status: ${response.status}`);

        if (response.status === 404) {
           console.log(`[FRONTEND] Analysis not ready yet for ${requestId}, retrying in 3s`);
           // Check if request was cancelled before scheduling retry
           if (!activeAnalysisRequests.has(requestId)) {
             console.log(`[FRONTEND] Analysis request ${requestId} was cancelled during retry`);
             return;
           }
           // Increase retry interval and limit retries to 15 (45 seconds total)
           if (retryCount < 15) {
             setTimeout(() => checkForAnalysis(requestId, retryCount + 1), 3000);
           } else {
             console.warn('[FRONTEND] Max retries reached for analysis check');
             activeAnalysisRequests.delete(requestId);
             showAnalysisTimeoutError();
           }
          return;
        }

        if (!response.ok) {
           const errorText = await response.text();
           console.error(`[FRONTEND] Analysis request failed: ${response.status} - ${errorText}`);
           throw new Error(`Failed to fetch analysis: ${response.status}`);
        }

        const data = await response.json();
         console.log(`[FRONTEND] Received analysis data:`, data);
         
         if (!data.analysis) {
           console.error('[FRONTEND] No analysis in response data');
           throw new Error('No analysis data received');
         }
         
         analysisCache.set(requestId, data.analysis);
         displayAnalysis(data.analysis);
         
      } catch (error) {
         activeAnalysisRequests.delete(requestId);
         
         if (error.name === 'AbortError') {
           console.log('[FRONTEND] Analysis request was cancelled or timed out');
           // Don't show error for cancelled requests
           return;
         } else {
           console.error('[FRONTEND] Error checking for analysis:', error);
           showAnalysisError(error.message || error.toString());
         }
       }
     }

         function displayAnalysis(analysisText) {
       console.log(`[FRONTEND] Displaying analysis:`, analysisText);
       
       try {
         // Hide processing overlay with smooth transition
         const processingOverlay = document.querySelector('.processing-overlay');
         if (processingOverlay) {
           processingOverlay.classList.add('complete');
           setTimeout(() => {
             if (processingOverlay.parentNode) {
               processingOverlay.remove();
             }
           }, 500);
         }
         
         console.log(`[FRONTEND] About to parse analysis...`);
         const parsed = parseAIResponse(analysisText);
         console.log(`[FRONTEND] Successfully parsed analysis:`, parsed);
         console.log(`[FRONTEND] Found ${parsed.products?.length || 0} products`);
         
         // Show the main product name below the photo
         let mainProductName = '';
         if (parsed.actualProductName) {
           mainProductName = parsed.actualProductName;
         } else if (parsed.products.length > 0) {
           mainProductName = parsed.products[0].name;
         }
         
         if (mainProductName) {
           document.getElementById('main-product-name').textContent = mainProductName;
           document.getElementById('product-name-section').style.display = 'block';
           
                             // Show nearby stores section - ONLY use parsed nearby stores (stores where the original product can be bought)
          console.log(`[FRONTEND] Nearby stores found:`, parsed.nearbyStores);
          if (parsed.nearbyStores.length > 0) {
            showNearbyStoresForProduct(parsed.nearbyStores, mainProductName);
          } else {
            console.log(`[FRONTEND] No nearby stores found - nearbyStores array is empty`);
          }
         }
         
         // Show the analysis section with proper vertical stacking
         const analysisSection = document.getElementById('analysis-section');
         analysisSection.style.display = 'block';
       
       if (parsed.products.length > 0) {
         console.log(`[FRONTEND] Found ${parsed.products.length} products to display`);
         
         // Find the best price for highlighting
         const minPrice = Math.min(...parsed.products.map(p => p.price));
         
         const priceTable = `
           <div class="price-comparison-table">
             ${parsed.products.map((product, index) => {
               const storeLogoUrl = getStoreLogoUrl(product.store);
               const isBestPrice = product.price === minPrice && parsed.products.length > 1;
               
               return `
                 <div class="table-row">
                   <div class="product-cell">
                     <div class="product-details">
                       <div class="product-name">${product.name.length > 40 ? product.name.substring(0, 40) + '...' : product.name}</div>
                       ${product.availability ? 
                         `<div class="product-availability ${product.availability.toLowerCase().includes('stock') ? 'in-stock' : 'out-of-stock'}">
                            ${product.availability}
                          </div>` : ''
                       }
                     </div>
                   </div>
                   <div class="store-cell">
                     <div class="store-info" id="store-logo-${index}">
                       ${storeLogoUrl ? 
                         `<img src="${storeLogoUrl}" alt="${product.store}" class="store-logo" onload="console.log('Store logo loaded: ${product.store}')" onerror="handleStoreLogoError('store-logo-${index}', '${product.store}')">` : 
                         `<div class="store-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                              <polyline points="9,22 9,12 15,12 15,22"/>
                            </svg>
                          </div>`
                       }
                       <span class="store-name">${product.store}</span>
                       ${product.rating ? 
                         `<div class="store-rating">
                            ⭐ ${product.rating}/5
                          </div>` : ''
                       }
                     </div>
                   </div>
                   <div class="price-cell ${isBestPrice ? 'best-price' : ''}">
                     ${product.originalPrice ? `<div class="original-price">$${product.originalPrice.toFixed(2)}</div>` : ''}
                     <div class="price-value">${product.priceDisplay}</div>
                     ${product.savings ? `<div class="savings-badge">Save $${product.savings}</div>` : ''}
                   </div>
                   <div class="action-cell">
                     ${product.url ? 
                       `<a href="${product.url}" target="_blank" class="buy-button">
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
                            <polyline points="15,3 21,3 21,9"/>
                            <line x1="10" y1="14" x2="21" y2="3"/>
                          </svg>
                          Buy Now
                        </a>` : 
                       `<button class="buy-button disabled">
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"/>
                            <path d="m9 12 2 2 4-4"/>
                          </svg>
                          Compare
                        </button>`
                     }
                     <button class="compare-button" onclick="window.open('https://www.google.com/search?q=${encodeURIComponent(product.name)}', '_blank')">
                       Compare Prices
                     </button>
                     <button class="find-nearby-button" onclick="findNearbyStores('${product.store}', '${product.name}')">
                       <span class="mobile-text">📍 Near</span>
                       <span class="desktop-text">📍 Find Near Me</span>
                     </button>
                   </div>
                 </div>
               `;
             }).join('')}
           </div>
         `;
         
         document.getElementById('price-comparison').innerHTML = priceTable;
       } else {
         console.log(`[FRONTEND] No structured products found, showing clean analysis`);
         console.log(`[FRONTEND] Original analysis length:`, analysisText.length);
         // Show a clean version of the analysis without raw JSON
         const cleanText = analysisText.replace(/```json[\s\S]*?```/g, '').replace(/\n+/g, '\n').trim();
         console.log(`[FRONTEND] Clean text length:`, cleanText.length);
         
         if (cleanText.length > 50) {
           document.getElementById('price-comparison').innerHTML = `
             <div class="price-card">
               <h3>Analysis Complete</h3>
               <p style="color: var(--text-secondary); line-height: 1.6; white-space: pre-wrap;">${cleanText}</p>
               <div style="margin-top: 16px; padding: 12px; background: rgba(0, 122, 255, 0.1); border-radius: 8px; font-size: 13px; color: var(--info);">
                 💡 Analysis completed successfully. Price comparison data will be enhanced in future updates.
               </div>
             </div>
           `;
         } else {
           // Very short text, might be an error or incomplete
           document.getElementById('price-comparison').innerHTML = `
             <div class="price-card">
               <h3>Analysis Received</h3>
               <p style="color: var(--text-secondary); line-height: 1.6;">
                 Analysis data received but needs manual review.
               </p>
               <div style="margin-top: 16px; padding: 12px; background: rgba(255, 214, 10, 0.1); border-radius: 8px; font-size: 13px; color: var(--warning);">
                 ⚠️ Please try taking another photo for detailed price comparison.
               </div>
             </div>
           `;
         }
       }
       
       // Display discounts/coupons if available
       console.log(`[FRONTEND] Checking discounts - found ${parsed.discounts?.length || 0} discounts`);
       if (parsed.discounts && parsed.discounts.length > 0) {
         console.log(`[FRONTEND] Showing ${parsed.discounts.length} discounts:`, parsed.discounts);
         console.log(`[FRONTEND] First discount full description:`, parsed.discounts[0].description);
         const discountSection = document.getElementById('discount-section') || createDiscountSection();
         discountSection.style.display = 'block';
         discountSection.innerHTML = `
           <div class="panel glass-elevated">
             <div class="panel-header">
               <div class="panel-title">Available Discounts & Coupons</div>
               <div class="panel-subtitle">Save even more with these offers!</div>
             </div>
             <div class="panel-content">
               <div class="discount-grid">
                 ${parsed.discounts.map(discount => `
                   <div class="discount-card">
                     <div class="discount-header">
                       <div class="discount-icon">🎫</div>
                       <div class="discount-title">${discount.title || 'Special Offer'}</div>
                     </div>
                     <div class="discount-description">${discount.description || ''}</div>
                     <div class="discount-store">
                       ${discount.store && getStoreLogoUrl(discount.store) ? 
                         `<img src="${getStoreLogoUrl(discount.store)}" alt="${discount.store}" class="discount-store-logo" onerror="this.style.display='none'">` : 
                         ''
                       }
                       <span class="discount-store-name">${discount.store || 'Various Stores'}</span>
                     </div>
                   </div>
                 `).join('')}
               </div>
             </div>
           </div>
         `;
       } else {
         console.log(`[FRONTEND] No discounts to display`);
         const discountSection = document.getElementById('discount-section');
         if (discountSection) {
           discountSection.style.display = 'none';
         }
       }


       
       // Update global status
       const globalStatus = document.getElementById('global-status');
       globalStatus.className = 'status-pill ready';
       globalStatus.innerHTML = 'Analysis Complete';
       
     } catch (error) {
       console.error(`[FRONTEND] CRITICAL ERROR in displayAnalysis:`, error);
       console.error(`[FRONTEND] Analysis text that caused error:`, analysisText);
       
       // Instead of showing error, try to show raw analysis text
       console.log(`[FRONTEND] Attempting to show raw analysis as fallback`);
       
       // Hide processing overlay
       const processingOverlay = document.querySelector('.processing-overlay');
       if (processingOverlay) {
         processingOverlay.classList.add('complete');
         setTimeout(() => processingOverlay.remove(), 500);
       }
       
       // Show analysis section with raw text
       const analysisSection = document.getElementById('analysis-section');
       analysisSection.style.display = 'block';
       
       // Clean up the text and show it
       const cleanText = analysisText.replace(/```json[\s\S]*?```/g, '').replace(/\n+/g, '\n').trim();
       document.getElementById('price-comparison').innerHTML = `
         <div class="price-card">
           <h3>Analysis Complete</h3>
           <p style="color: var(--text-secondary); line-height: 1.6; white-space: pre-wrap;">${cleanText}</p>
           <div style="margin-top: 16px; padding: 12px; background: rgba(255, 214, 10, 0.1); border-radius: 8px; font-size: 13px; color: var(--warning);">
             💡 Detailed price comparison temporarily unavailable. Raw analysis shown above.
           </div>
         </div>
       `;

       
       // Update global status
       const globalStatus = document.getElementById('global-status');
       globalStatus.className = 'status-pill ready';
       globalStatus.innerHTML = 'Analysis Complete';
     }
     }

         function showAnalysisError(errorMessage = 'Unknown error') {
       console.log(`[FRONTEND] Showing analysis error: ${errorMessage}`);
       
       // Hide processing overlay
       const processingOverlay = document.querySelector('.processing-overlay');
       if (processingOverlay) {
         processingOverlay.classList.add('complete');
         setTimeout(() => processingOverlay.remove(), 500);
       }
       
       const globalStatus = document.getElementById('global-status');
       globalStatus.className = 'status-pill error';
       globalStatus.innerHTML = 'Analysis Failed';
       
       const analysisSection = document.getElementById('analysis-section');
       analysisSection.style.display = 'flex';
       analysisSection.innerHTML = `
         <div class="panel glass-elevated">
           <div class="panel-header">
             <div class="panel-title">Analysis Error</div>
             <div class="panel-subtitle">Unable to complete analysis</div>
           </div>
           <div class="panel-content">
             <div class="empty-state">
               <div class="empty-icon">
                 <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                   <circle cx="12" cy="12" r="10"/>
                   <line x1="15" y1="9" x2="9" y2="15"/>
                   <line x1="9" y1="9" x2="15" y2="15"/>
                 </svg>
               </div>
               <div class="empty-title">Analysis Failed</div>
               <div class="empty-subtitle">
                 Please try taking another photo or check your connection<br>
                 <small style="color: var(--text-quaternary); margin-top: 8px; display: block;">
                   Error: ${errorMessage}
                 </small>
               </div>
             </div>
           </div>
         </div>
       `;
     }

     function showAnalysisTimeoutError() {
       console.log(`[FRONTEND] Showing analysis timeout error`);
       
       // Hide processing overlay
       const processingOverlay = document.querySelector('.processing-overlay');
       if (processingOverlay) {
         processingOverlay.classList.add('complete');
         setTimeout(() => processingOverlay.remove(), 500);
       }
       
       const globalStatus = document.getElementById('global-status');
       globalStatus.className = 'status-pill error';
       globalStatus.innerHTML = 'Analysis Timeout';
       
       const analysisSection = document.getElementById('analysis-section');
       analysisSection.style.display = 'flex';
       analysisSection.innerHTML = `
         <div class="panel glass-elevated">
           <div class="panel-header">
             <div class="panel-title">Analysis Taking Longer Than Expected</div>
             <div class="panel-subtitle">AI processing is experiencing delays</div>
           </div>
           <div class="panel-content">
             <div class="empty-state">
               <div class="empty-icon">
                 <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                   <circle cx="12" cy="12" r="10"/>
                   <polyline points="12,6 12,12 16,14"/>
                 </svg>
               </div>
               <div class="empty-title">Please Wait or Try Again</div>
               <div class="empty-subtitle">
                 The AI is working hard to find the best prices for you.<br>
                 You can wait for results or take a new photo to start fresh.
                 <div style="margin-top: 16px;">
                   <button onclick="location.reload()" class="action-button" style="margin: 0 auto; display: block;">
                     🔄 Take New Photo
                   </button>
                 </div>
               </div>
             </div>
           </div>
         </div>
       `;
     }

    function showEmptyState(title, subtitle) {
      const catalogue = document.getElementById('photo-catalogue');
      catalogue.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
              <circle cx="12" cy="13" r="4"/>
            </svg>
          </div>
          <div class="empty-title">${title}</div>
          <div class="empty-subtitle">${subtitle}</div>
        </div>
      `;
    }

    async function checkForAnalysisUpdates() {
      // Throttle analysis updates to prevent overwhelming the API
      if (currentPhotos.length === 0) return;
      
      for (const photo of currentPhotos) {
        if (photo.hasAnalysis && !analysisCache.has(photo.requestId)) {
          try {
            const response = await fetch(`/api/analysis/${photo.requestId}`);
            if (response.ok) {
              const data = await response.json();
              analysisCache.set(photo.requestId, data.analysis);
            }
          } catch (error) {
            console.error('Error fetching analysis:', error);
          }
          // Small delay between requests to prevent API flooding
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }
    }

    async function loadAnalysis(requestId) {
      if (analysisCache.has(requestId)) {
        displayAnalysis(analysisCache.get(requestId));
        return;
      }
      
      try {
        const response = await fetch(`/api/analysis/${requestId}`);
        if (response.ok) {
        const data = await response.json();
          if (data.analysis) {
            analysisCache.set(requestId, data.analysis);
            displayAnalysis(data.analysis);
          }
        } else {
          console.log('Analysis not available yet, will retry automatically');
        }
      } catch (error) {
        console.error('Error loading analysis:', error);
      }
    }

    // Theme management
    function initializeTheme() {
      const savedTheme = localStorage.getItem('theme') || 'dark';
      document.documentElement.setAttribute('data-theme', savedTheme);
      
      // Update theme toggle button
      const themeToggle = document.getElementById('theme-toggle');
      if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
      }
    }

    function toggleTheme() {
      const currentTheme = document.documentElement.getAttribute('data-theme');
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      
      // Add a subtle animation feedback
      const themeToggle = document.getElementById('theme-toggle');
      themeToggle.style.transform = 'scale(0.95)';
      setTimeout(() => {
        themeToggle.style.transform = '';
      }, 100);
    }



    // Initialize application with smart polling
    function startPolling() {
      // Clear any existing polling
      if (pollInterval) {
        clearInterval(pollInterval);
      }
      
      // Start with immediate check
      checkForPhotos();
      
      // Poll every 5 seconds instead of every second to reduce API load
      pollInterval = setInterval(checkForPhotos, 5000);
      
      console.log('[FRONTEND] Started photo polling every 5 seconds');
    }
    
    function stopPolling() {
      if (pollInterval) {
        clearInterval(pollInterval);
        pollInterval = null;
        console.log('[FRONTEND] Stopped photo polling');
      }
    }
    
    // Handle page visibility to pause polling when not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopPolling();
      } else {
        startPolling();
      }
    });
    
    // Handle window focus/blur for better resource management
    window.addEventListener('blur', stopPolling);
    window.addEventListener('focus', startPolling);
    
    // Initialize everything
    initializeTheme();
    startPolling();
  </script>
</body>
</html>
</html>