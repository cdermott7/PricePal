<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PricePal - Enterprise Price Intelligence</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --blur-light: blur(20px);
      --blur-medium: blur(40px);
      --blur-heavy: blur(80px);
      --blur-intense: blur(120px);
      --success: #34C759;
      --warning: #FFD60A;
      --error: #FF453A;
      --info: #007AFF;
      --brand-primary: #007aff;
      --brand-secondary: #5856d6;
      --brand-accent: #1d1d1f;
    }

    /* Dark theme (default) */
    :root,
    [data-theme="dark"] {
      --primary-glass: rgba(255, 255, 255, 0.08);
      --secondary-glass: rgba(255, 255, 255, 0.04);
      --accent-glass: rgba(255, 255, 255, 0.12);
      --elevated-glass: rgba(255, 255, 255, 0.15);
      --text-primary: rgba(255, 255, 255, 0.98);
      --text-secondary: rgba(255, 255, 255, 0.78);
      --text-tertiary: rgba(255, 255, 255, 0.58);
      --text-quaternary: rgba(255, 255, 255, 0.38);
      --border-glass: rgba(255, 255, 255, 0.15);
      --border-subtle: rgba(255, 255, 255, 0.08);
      --shadow-soft: rgba(0, 0, 0, 0.08);
      --shadow-medium: rgba(0, 0, 0, 0.12);
      --shadow-hard: rgba(0, 0, 0, 0.18);
      --shadow-intense: rgba(0, 0, 0, 0.24);
      --bg-primary: #000000;
      --bg-secondary: #0a0a0a;
      --star-opacity: 0.1;
    }

    /* Light theme */
    [data-theme="light"] {
      --primary-glass: rgba(255, 255, 255, 0.7);
      --secondary-glass: rgba(255, 255, 255, 0.5);
      --accent-glass: rgba(255, 255, 255, 0.9);
      --elevated-glass: rgba(255, 255, 255, 0.8);
      --text-primary: rgba(0, 0, 0, 0.98);
      --text-secondary: rgba(0, 0, 0, 0.78);
      --text-tertiary: rgba(0, 0, 0, 0.58);
      --text-quaternary: rgba(0, 0, 0, 0.38);
      --border-glass: rgba(0, 0, 0, 0.08);
      --border-subtle: rgba(0, 0, 0, 0.05);
      --shadow-soft: rgba(0, 0, 0, 0.03);
      --shadow-medium: rgba(0, 0, 0, 0.08);
      --shadow-hard: rgba(0, 0, 0, 0.12);
      --shadow-intense: rgba(0, 0, 0, 0.16);
      --bg-primary: #f5f5f7;
      --bg-secondary: #ffffff;
      --star-opacity: 0.03;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
      background: radial-gradient(ellipse at top, var(--bg-secondary) 0%, var(--bg-primary) 100%),
                  radial-gradient(ellipse at bottom right, rgba(0, 122, 255, 0.03) 0%, transparent 50%),
                  radial-gradient(ellipse at bottom left, rgba(88, 86, 214, 0.02) 0%, transparent 50%),
                  var(--bg-primary);
      background-attachment: fixed;
      min-height: 100vh;
      color: var(--text-primary);
      overflow-x: hidden;
      font-weight: 400;
      line-height: 1.5;
      font-feature-settings: 'cv11', 'ss01';
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      position: relative;
      transition: background 0.3s ease, color 0.3s ease;
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: 
        radial-gradient(2px 2px at 20px 30px, rgba(255, 255, 255, var(--star-opacity)), transparent),
        radial-gradient(2px 2px at 40px 70px, rgba(255, 255, 255, calc(var(--star-opacity) * 0.8)), transparent),
        radial-gradient(1px 1px at 90px 40px, rgba(255, 255, 255, calc(var(--star-opacity) * 0.6)), transparent),
        radial-gradient(1px 1px at 130px 80px, rgba(255, 255, 255, calc(var(--star-opacity) * 0.4)), transparent),
        radial-gradient(2px 2px at 160px 30px, rgba(255, 255, 255, var(--star-opacity)), transparent);
      background-repeat: repeat;
      background-size: 200px 100px;
      pointer-events: none;
      z-index: 1;
      transition: opacity 0.3s ease;
    }

    .glass-surface {
      background: var(--primary-glass);
      backdrop-filter: var(--blur-light);
      -webkit-backdrop-filter: var(--blur-light);
      border: 1px solid var(--border-glass);
      box-shadow: 
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.1),
        inset 0 -1px 0 rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
    }

    .glass-elevated {
      background: var(--elevated-glass);
      backdrop-filter: var(--blur-medium);
      -webkit-backdrop-filter: var(--blur-medium);
      border: 1px solid var(--border-glass);
      box-shadow: 
        0 20px 60px var(--shadow-medium),
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.12),
        inset 0 -1px 0 rgba(0, 0, 0, 0.08);
      transition: all 0.3s ease;
    }

    .nav-bar {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
      background: var(--secondary-glass);
      backdrop-filter: var(--blur-intense);
      -webkit-backdrop-filter: var(--blur-intense);
      border-bottom: 1px solid var(--border-subtle);
      padding: 0;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .nav-content {
      max-width: 1400px;
      margin: 0 auto;
      padding: 16px 32px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .brand-section {
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .brand-logo {
      width: 40px;
      height: 40px;
      border-radius: 12px;
      background: var(--accent-glass);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-glass);
      box-shadow: 0 4px 16px var(--shadow-soft);
    }

    .brand-logo img {
      width: 28px;
      height: 28px;
      object-fit: contain;
    }

    .brand-text {
      display: flex;
      flex-direction: column;
      gap: 2px;
    }

    .brand-name {
      font-size: 20px;
      font-weight: 700;
      letter-spacing: -0.02em;
      color: var(--text-primary);
    }

    .brand-tagline {
      font-size: 13px;
      font-weight: 500;
      color: var(--text-secondary);
      letter-spacing: -0.005em;
    }

    .nav-actions {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .theme-toggle {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 44px;
      height: 44px;
      border: 1px solid var(--border-glass);
      border-radius: 12px;
      background: var(--secondary-glass);
      color: var(--text-primary);
      cursor: pointer;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }

    .theme-toggle:hover {
      background: var(--accent-glass);
      transform: translateY(-1px);
      box-shadow: 0 8px 24px var(--shadow-soft);
    }

    .theme-icon {
      position: absolute;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .sun-icon {
      opacity: 0;
      transform: rotate(180deg) scale(0.8);
    }

    .moon-icon {
      opacity: 1;
      transform: rotate(0deg) scale(1);
    }

    [data-theme="light"] .sun-icon {
      opacity: 1;
      transform: rotate(0deg) scale(1);
    }

    [data-theme="light"] .moon-icon {
      opacity: 0;
      transform: rotate(-180deg) scale(0.8);
    }

    .status-pill {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 600;
      letter-spacing: -0.005em;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      border: 1px solid transparent;
    }

    .status-pill.ready {
      background: rgba(52, 199, 89, 0.12);
      color: var(--success);
      border-color: rgba(52, 199, 89, 0.2);
    }

    .status-pill.analyzing {
      background: rgba(255, 214, 10, 0.12);
      color: var(--warning);
      border-color: rgba(255, 214, 10, 0.2);
    }

    .status-pill.error {
      background: rgba(255, 69, 58, 0.12);
      color: var(--error);
      border-color: rgba(255, 69, 58, 0.2);
    }

    .status-spinner {
      width: 12px;
      height: 12px;
      border: 2px solid rgba(255, 214, 10, 0.3);
      border-top: 2px solid var(--warning);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .main-container {
      margin-top: 88px;
      max-width: 1400px;
      margin-left: auto;
      margin-right: auto;
      padding: 32px;
      display: grid;
      grid-template-columns: 420px 1fr;
      gap: 32px;
      min-height: calc(100vh - 120px);
      position: relative;
      z-index: 10;
    }

    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 24px;
    }

    .panel {
      border-radius: 20px;
      overflow: hidden;
      position: relative;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .panel:hover {
      transform: translateY(-2px);
      box-shadow: 
        0 32px 80px var(--shadow-medium),
        0 8px 32px var(--shadow-soft),
        inset 0 1px 0 rgba(255, 255, 255, 0.15),
        inset 0 -1px 0 rgba(0, 0, 0, 0.08);
    }

    .panel-header {
      padding: 24px 24px 16px;
      border-bottom: 1px solid var(--border-subtle);
    }

    .panel-title {
      font-size: 18px;
      font-weight: 700;
      letter-spacing: -0.02em;
      color: var(--text-primary);
      margin-bottom: 4px;
    }

    .panel-subtitle {
      font-size: 14px;
      font-weight: 500;
      color: var(--text-secondary);
      letter-spacing: -0.005em;
    }

    .panel-content {
      padding: 24px;
    }

    .photo-catalogue {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
      margin-bottom: 24px;
    }

    .photo-item {
      aspect-ratio: 1;
      position: relative;
      border-radius: 16px;
      overflow: hidden;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      background: var(--secondary-glass);
      border: 2px solid transparent;
      group: hover;
    }

    .photo-item:hover {
      transform: scale(1.02);
      border-color: var(--border-glass);
      box-shadow: 0 8px 32px var(--shadow-soft);
    }

    .photo-item.active {
      border-color: var(--info);
      box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.15);
      transform: scale(1.02);
    }

    .photo-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .photo-overlay {
      position: absolute;
      inset: 0;
      background: rgba(0, 0, 0, 0.3);
      display: flex;
      align-items: flex-end;
      padding: 12px;
      opacity: 0;
      transition: opacity 0.2s ease;
    }

    .photo-item:hover .photo-overlay {
      opacity: 1;
    }

    .photo-meta {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 12px;
      font-weight: 600;
      color: var(--text-primary);
    }

    .analysis-badge {
      padding: 4px 8px;
      border-radius: 8px;
      font-size: 10px;
      font-weight: 700;
      letter-spacing: 0.02em;
      text-transform: uppercase;
    }

    .analysis-badge.complete {
      background: var(--success);
      color: white;
    }

    .analysis-badge.pending {
      background: var(--warning);
      color: white;
    }

    .main-content {
      display: flex;
      flex-direction: column;
      gap: 32px;
    }

    .hero-section {
      text-align: center;
      padding: 64px 0;
    }

    .hero-title {
      font-size: 48px;
      font-weight: 800;
      letter-spacing: -0.03em;
      line-height: 1.1;
      margin-bottom: 16px;
      color: var(--text-primary);
    }

    .hero-subtitle {
      font-size: 20px;
      font-weight: 500;
      color: var(--text-secondary);
      letter-spacing: -0.01em;
      margin-bottom: 32px;
    }

    .cta-button {
      display: inline-flex;
      align-items: center;
      gap: 12px;
      padding: 16px 32px;
      border-radius: 16px;
      font-size: 16px;
      font-weight: 600;
      letter-spacing: -0.01em;
      text-decoration: none;
      color: var(--text-primary);
      background: var(--accent-glass);
      border: 1px solid var(--border-glass);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
    }

    .cta-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 16px 48px var(--shadow-medium);
      background: var(--elevated-glass);
    }

    .photo-display {
      position: relative;
      background: var(--secondary-glass);
      border-radius: 24px;
      overflow: hidden;
      aspect-ratio: 4/3;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-glass);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .photo-display:hover {
      background: var(--primary-glass);
      transform: scale(1.005);
    }

    .photo-display img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: 20px;
      box-shadow: 0 20px 60px var(--shadow-medium);
    }

    .analysis-section {
      display: grid;
      gap: 24px;
    }

    .price-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
    }

    .price-card {
      background: var(--secondary-glass);
      border: 1px solid var(--border-glass);
      border-radius: 16px;
      padding: 24px;
      position: relative;
      overflow: hidden;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .price-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: var(--brand-primary);
    }

    .price-card:hover {
      transform: translateY(-4px);
      background: var(--primary-glass);
      box-shadow: 0 20px 60px var(--shadow-medium);
    }

    .price-card h3 {
      font-size: 18px;
      font-weight: 700;
      letter-spacing: -0.01em;
      color: var(--text-primary);
      margin-bottom: 8px;
    }

    .price-card .store {
      font-size: 14px;
      font-weight: 600;
      color: var(--text-secondary);
      margin-bottom: 12px;
      text-transform: uppercase;
      letter-spacing: 0.02em;
    }

    .price-card .price {
      font-size: 28px;
      font-weight: 800;
      color: var(--success);
      letter-spacing: -0.02em;
      margin-bottom: 16px;
    }

    .price-card .savings {
      font-size: 14px;
      font-weight: 600;
      color: var(--warning);
      background: rgba(255, 214, 10, 0.1);
      padding: 6px 12px;
      border-radius: 8px;
      display: inline-block;
    }

    .recommendation-card {
      background: var(--accent-glass);
      border: 1px solid var(--border-glass);
      border-radius: 20px;
      padding: 32px;
      position: relative;
      overflow: hidden;
    }

    .action-button {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 12px 16px;
      border-radius: 12px;
      font-size: 14px;
      font-weight: 600;
      letter-spacing: -0.01em;
      text-decoration: none;
      color: var(--text-primary);
      background: var(--accent-glass);
      border: 1px solid var(--border-glass);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
    }

    .action-button:hover {
      transform: translateY(-1px);
      box-shadow: 0 8px 24px var(--shadow-soft);
      background: var(--elevated-glass);
    }

    .action-button:active {
      transform: translateY(0);
    }

    .action-button.secondary {
      background: var(--secondary-glass);
      color: var(--text-secondary);
    }

    .action-button.secondary:hover {
      background: var(--primary-glass);
      color: var(--text-primary);
    }

    .action-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }

    .recommendation-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: var(--success);
    }

    .recommendation-card h3 {
      font-size: 20px;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 16px;
      letter-spacing: -0.01em;
    }

    /* Enhanced Price Comparison Table Styles */
    .price-comparison-table {
      width: 100%;
      border-radius: 20px;
      overflow: hidden;
      background: var(--secondary-glass);
      border: 1px solid var(--border-glass);
      box-shadow: 0 8px 32px var(--shadow-soft);
      backdrop-filter: var(--blur-light);
      -webkit-backdrop-filter: var(--blur-light);
    }

    .table-header {
      display: grid;
      grid-template-columns: 2.5fr 1.5fr 1.2fr 1fr;
      background: var(--accent-glass);
      border-bottom: 2px solid var(--border-glass);
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .header-cell {
      padding: 20px 24px;
      font-size: 13px;
      font-weight: 800;
      color: var(--text-primary);
      text-transform: uppercase;
      letter-spacing: 0.08em;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .header-cell svg {
      width: 16px;
      height: 16px;
      opacity: 0.7;
    }

    .table-row {
      display: grid;
      grid-template-columns: 2.5fr 1.5fr 1.2fr 1fr;
      border-bottom: 1px solid var(--border-subtle);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
    }

    .table-row:hover {
      background: var(--primary-glass);
      transform: translateX(4px);
      box-shadow: 0 4px 20px var(--shadow-soft);
    }

    .table-row:last-child {
      border-bottom: none;
    }

    .table-row::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 3px;
      background: var(--brand-primary);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .table-row:hover::before {
      opacity: 1;
    }

    .product-cell {
      display: flex;
      align-items: center;
      gap: 20px;
      padding: 24px;
    }

    .product-image {
      width: 80px;
      height: 80px;
      border-radius: 16px;
      overflow: hidden;
      background: var(--accent-glass);
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid var(--border-glass);
      box-shadow: 0 4px 16px var(--shadow-soft);
      transition: all 0.3s ease;
      flex-shrink: 0;
    }

    .product-image:hover {
      transform: scale(1.05);
      box-shadow: 0 8px 32px var(--shadow-medium);
    }

    .product-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: all 0.3s ease;
    }

    .product-placeholder {
      color: var(--text-tertiary);
      transition: all 0.3s ease;
    }

    .table-row:hover .product-placeholder {
      color: var(--text-secondary);
    }

    .product-details {
      flex: 1;
      min-width: 0;
    }

    .product-name {
      font-size: 16px;
      font-weight: 700;
      color: var(--text-primary);
      line-height: 1.4;
      margin-bottom: 6px;
      letter-spacing: -0.01em;
    }

    .product-description {
      font-size: 13px;
      color: var(--text-tertiary);
      line-height: 1.4;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .product-availability {
      font-size: 12px;
      font-weight: 600;
      margin-top: 4px;
      padding: 2px 8px;
      border-radius: 8px;
      display: inline-block;
    }

    .product-availability.in-stock {
      background: rgba(52, 199, 89, 0.1);
      color: var(--success);
    }

    .product-availability.out-of-stock {
      background: rgba(255, 69, 58, 0.1);
      color: var(--error);
    }

    .store-cell {
      display: flex;
      align-items: center;
      padding: 24px 20px;
    }

    .store-info {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      text-align: center;
    }

    .store-logo {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      object-fit: contain;
      background: white;
      padding: 8px;
      border: 2px solid var(--border-glass);
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px var(--shadow-soft);
    }

    .store-logo:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 16px var(--shadow-medium);
    }

    .store-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      background: var(--accent-glass);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-tertiary);
      border: 2px solid var(--border-glass);
      transition: all 0.3s ease;
    }

    .store-icon:hover {
      background: var(--primary-glass);
      color: var(--text-secondary);
      transform: scale(1.1);
    }

    .store-name {
      font-size: 14px;
      font-weight: 700;
      color: var(--text-secondary);
      letter-spacing: -0.005em;
    }

    .store-rating {
      font-size: 12px;
      color: var(--text-tertiary);
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .price-cell {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 24px 20px;
      text-align: center;
    }

    .price-value {
      font-size: 24px;
      font-weight: 900;
      color: var(--success);
      margin-bottom: 6px;
      letter-spacing: -0.02em;
    }

    .original-price {
      font-size: 14px;
      color: var(--text-tertiary);
      text-decoration: line-through;
      margin-bottom: 4px;
    }

    .savings-badge {
      font-size: 11px;
      font-weight: 700;
      color: white;
      background: var(--warning);
      padding: 4px 10px;
      border-radius: 12px;
      display: inline-block;
      text-transform: uppercase;
      letter-spacing: 0.02em;
      box-shadow: 0 2px 8px rgba(255, 214, 10, 0.3);
    }

    .best-price {
      position: relative;
    }

    .best-price::before {
      content: '🏆 Best Price';
      position: absolute;
      top: -8px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 10px;
      font-weight: 700;
      color: var(--warning);
      background: rgba(255, 214, 10, 0.1);
      padding: 2px 8px;
      border-radius: 8px;
      white-space: nowrap;
    }

    .action-cell {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 24px 20px;
      gap: 8px;
    }

    .buy-button {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 14px 20px;
      border-radius: 16px;
      font-size: 14px;
      font-weight: 700;
      text-decoration: none;
      border: none;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      background: var(--brand-primary);
      color: white;
      white-space: nowrap;
      box-shadow: 0 4px 16px rgba(0, 122, 255, 0.2);
    }

    .buy-button:hover {
      background: var(--brand-secondary);
      transform: translateY(-2px) scale(1.02);
      box-shadow: 0 8px 32px rgba(0, 122, 255, 0.4);
    }

    .buy-button.disabled {
      background: var(--accent-glass);
      color: var(--text-tertiary);
      cursor: not-allowed;
      box-shadow: none;
    }

    .buy-button.disabled:hover {
      transform: none;
      box-shadow: none;
    }

    .compare-button {
      font-size: 12px;
      color: var(--text-tertiary);
      background: var(--secondary-glass);
      padding: 8px 12px;
      border-radius: 12px;
      border: 1px solid var(--border-glass);
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .compare-button:hover {
      color: var(--text-secondary);
      background: var(--primary-glass);
    }

    .recommendation-card p {
      font-size: 16px;
      font-weight: 500;
      color: var(--text-secondary);
      line-height: 1.6;
      letter-spacing: -0.005em;
    }

    .empty-state {
      text-align: center;
      padding: 64px 32px;
      color: var(--text-tertiary);
    }

    .empty-icon {
      width: 96px;
      height: 96px;
      margin: 0 auto 24px;
      background: var(--secondary-glass);
      border-radius: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 40px;
      border: 1px solid var(--border-glass);
      color: var(--text-quaternary);
    }

    .empty-title {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 12px;
      color: var(--text-secondary);
      letter-spacing: -0.02em;
    }

    .empty-subtitle {
      font-size: 16px;
      line-height: 1.6;
      max-width: 400px;
      margin: 0 auto;
      font-weight: 500;
    }

    .pulse {
      animation: pulse 2.5s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.6; }
    }

    .shimmer-effect {
      position: relative;
      overflow: hidden;
    }

    .shimmer-effect::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.08), transparent);
      animation: shimmer 2.5s infinite;
    }

    @keyframes shimmer {
      0% { left: -100%; }
      100% { left: 100%; }
    }

    @media (max-width: 1200px) {
      .main-container {
        grid-template-columns: 360px 1fr;
        gap: 24px;
        padding: 24px;
      }
      
      .hero-title {
        font-size: 36px;
      }

      .table-header {
        grid-template-columns: 2fr 1.2fr 1fr 0.8fr;
      }
      
      .table-row {
        grid-template-columns: 2fr 1.2fr 1fr 0.8fr;
      }
    }

    @media (max-width: 900px) {
      .main-container {
        grid-template-columns: 1fr;
        gap: 16px;
        margin-top: 80px;
      }
      
      .sidebar {
        order: 2;
      }
      
      .main-content {
        order: 1;
      }
      
      .nav-content {
        padding: 12px 24px;
      }
      
      .hero-title {
        font-size: 32px;
      }
      
      .hero-subtitle {
        font-size: 18px;
      }
      
      .price-grid {
        grid-template-columns: 1fr;
      }
      
      .photo-catalogue {
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 12px;
        max-height: 200px;
        overflow-y: auto;
      }

      /* Tablet table adjustments */
      .table-header {
        grid-template-columns: 1.8fr 1fr 1fr 0.8fr;
      }
      
      .table-row {
        grid-template-columns: 1.8fr 1fr 1fr 0.8fr;
      }

      .product-cell {
        gap: 16px;
        padding: 20px 16px;
      }

      .product-image {
        width: 60px;
        height: 60px;
      }

      .store-cell {
        padding: 20px 12px;
      }

      .store-logo, .store-icon {
        width: 40px;
        height: 40px;
      }

      .store-name {
        font-size: 13px;
      }

      .price-cell {
        padding: 20px 12px;
      }

      .price-value {
        font-size: 20px;
      }

      .action-cell {
        padding: 20px 12px;
      }

      .buy-button {
        padding: 10px 14px;
        font-size: 13px;
      }
    }

    @media (max-width: 600px) {
      .main-container {
        padding: 16px;
      }
      
      .nav-content {
        padding: 12px 16px;
      }
      
      .photo-catalogue {
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      }
      
      .hero-title {
        font-size: 28px;
      }
      
      .panel-content {
        padding: 16px;
      }
      
      .analysis-section {
        gap: 16px;
      }
      
      .price-card {
        padding: 20px;
      }
      
      .recommendation-card {
        padding: 24px;
      }
      
      /* Mobile table adjustments */
      .price-comparison-table {
        overflow-x: auto;
      }

      .table-header {
        grid-template-columns: 200px 120px 100px 80px;
        min-width: 500px;
      }
      
      .table-row {
        grid-template-columns: 200px 120px 100px 80px;
        min-width: 500px;
      }
      
      .product-cell {
        padding: 16px 12px;
        gap: 8px;
        min-width: 200px;
      }
      
      .product-image {
        width: 40px;
        height: 40px;
      }
      
      .product-name {
        font-size: 13px;
        line-height: 1.3;
      }

      .product-description {
        display: none;
      }
      
      .store-cell {
        padding: 16px 8px;
        min-width: 120px;
      }
      
      .store-info {
        gap: 4px;
      }
      
      .store-logo, .store-icon {
        width: 32px;
        height: 32px;
      }
      
      .store-name {
        font-size: 11px;
        text-align: center;
      }

      .store-rating {
        display: none;
      }
      
      .price-cell {
        padding: 16px 8px;
        min-width: 100px;
      }
      
      .price-value {
        font-size: 16px;
      }

      .original-price {
        font-size: 12px;
      }

      .savings-badge {
        font-size: 9px;
        padding: 2px 6px;
      }

      .best-price::before {
        font-size: 8px;
        padding: 1px 4px;
      }

      .action-cell {
        padding: 16px 8px;
        min-width: 80px;
      }
      
      .buy-button {
        padding: 8px 10px;
        font-size: 11px;
        gap: 4px;
      }

      .buy-button svg {
        width: 12px;
        height: 12px;
      }

      .compare-button {
        font-size: 10px;
        padding: 4px 8px;
      }
    }
  </style>
</head>
<body>
  <nav class="nav-bar">
    <div class="nav-content">
      <div class="brand-section">
        <div class="brand-logo">
          <img src="/assets/PricePalLogo.png" alt="PricePal">
        </div>
        <div class="brand-text">
          <div class="brand-name">PricePal</div>
          <div class="brand-tagline">Intelligent Price Discovery</div>
        </div>
      </div>
      <div class="nav-actions">
        <button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
          <svg class="theme-icon sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="5"/>
            <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
          </svg>
          <svg class="theme-icon moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
          </svg>
        </button>
        <div id="global-status" class="status-pill ready">
          Ready
        </div>
      </div>
    </div>
  </nav>

  <div class="main-container">
    <div class="sidebar">
      <div class="panel glass-elevated">
        <div class="panel-header">
          <div class="panel-title">Photo Catalogue</div>
          <div class="panel-subtitle">Smart visual analysis</div>
        </div>
        <div class="panel-content">
          <div id="photo-catalogue" class="photo-catalogue">
            <div class="empty-state">
              <div class="empty-icon">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
                  <circle cx="12" cy="13" r="4"/>
                </svg>
              </div>
              <div class="empty-title">No Photos</div>
              <div class="empty-subtitle">Take photos with your Mentra glasses to begin intelligent price analysis</div>
            </div>
          </div>
        </div>
      </div>


    </div>

    <div class="main-content">
      <div id="main-display">
        <div class="hero-section">
          <div class="hero-title">Discover Better Prices</div>
          <div class="hero-subtitle">
            AI-powered price intelligence at the speed of light
          </div>
          <div class="cta-button">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
              <circle cx="12" cy="13" r="4"/>
            </svg>
            Take Photo to Start
          </div>
        </div>
      </div>

      <div id="analysis-section" class="analysis-section" style="display: none;">
        <div class="panel glass-elevated">
          <div class="panel-header">
            <div class="panel-title">Market Analysis</div>
            <div class="panel-subtitle">Real-time price intelligence</div>
          </div>
          <div class="panel-content">
            <div id="price-comparison" class="price-grid">
              <!-- Price cards will be inserted here -->
            </div>
          </div>
  </div>
  
        <div id="recommendation-section" style="display: none;">
          <div class="recommendation-card">
            <h3>Strategic Recommendation</h3>
            <p id="recommendation-text">
              <!-- Recommendation will be inserted here -->
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    let currentPhotos = [];
    let currentPhotoIndex = -1;
    let analysisCache = new Map();

         // Enhanced AI parsing with multiple strategies
     function parseAIResponse(analysisText) {
       console.log(`[FRONTEND] Parsing AI response (length: ${analysisText.length}):`, analysisText);
       
       const parsed = {
         products: [],
         recommendation: '',
         summary: '',
         originalText: analysisText
       };

       try {
        // Strategy 1: More robust JSON extraction
        console.log(`[FRONTEND] Full analysis text:`, analysisText);
        
        // Try multiple patterns to find JSON
        let jsonText = null;
        
        // Pattern 1: Look for ```json blocks
        const jsonBlockMatch = analysisText.match(/```json\s*([\s\S]*?)\s*```/);
        if (jsonBlockMatch) {
          jsonText = jsonBlockMatch[1];
          console.log(`[FRONTEND] Found JSON block:`, jsonText);
        }
        
        // Pattern 2: Look for standalone JSON arrays (fallback)
        if (!jsonText) {
          const arrayMatch = analysisText.match(/(\[[\s\S]*?\])/);
          if (arrayMatch) {
            jsonText = arrayMatch[1];
            console.log(`[FRONTEND] Found JSON array:`, jsonText);
          }
        }
        
        if (jsonText) {
          try {
            // Clean and parse the JSON
            const cleanJson = jsonText.trim();
            console.log(`[FRONTEND] Attempting to parse:`, cleanJson);
            
            const data = JSON.parse(cleanJson);
            console.log(`[FRONTEND] Successfully parsed JSON:`, data);
            
            // Handle both direct array and wrapped object formats
            let products = [];
            if (Array.isArray(data)) {
              products = data;
            } else if (data.alternatives && Array.isArray(data.alternatives)) {
              products = data.alternatives;
            } else if (data.products && Array.isArray(data.products)) {
              products = data.products;
            }
            
            console.log(`[FRONTEND] Extracted ${products.length} products:`, products);
            
            if (products.length > 0) {
              parsed.products = products.map((item, index) => {
                console.log(`[FRONTEND] Processing item ${index}:`, item);
                
                // Extract price from string values like "$1599"
                const priceValue = item['Product Price'] || item.ProductPrice || item.price || '0';
                let price = 0;
                let priceDisplay = '$0.00';
                
                if (typeof priceValue === 'number') {
                  price = priceValue;
                  priceDisplay = `$${price.toFixed(2)}`;
                } else if (typeof priceValue === 'string') {
                  // Remove $ and parse number
                  const cleanPrice = priceValue.replace(/[$,]/g, '');
                  price = parseFloat(cleanPrice);
                  priceDisplay = priceValue; // Keep original formatting
                  
                  console.log(`[FRONTEND] Price "${priceValue}" -> ${price} (display: ${priceDisplay})`);
                }
                
                                  const processedItem = {
                    name: item['Product Name'] || item.ProductName || item.name || 'Unknown Product',
                    store: item['Product Store'] || item.ProductStore || item.store || 'Unknown Store',
                    price: price,
                    priceDisplay: priceDisplay,
                    originalPrice: item.originalPrice || null,
                    savings: item.savings || null,
                    url: item['Product URL'] || item.ProductURL || item.url || null,
                    productImageUrl: item['Product Image URL'] || item.ProductImageURL || item.productImageUrl || null,
                    storeImageUrl: item['Product Store Image URL'] || item.ProductStoreImageURL || item['Product store Image URL'] || item.storeImageUrl || null,
                    rating: item.rating || null,
                    description: item.description || item.ProductDescription || null,
                    availability: item.availability || item.inStock || null
                  };
                  
                  // Debug image URLs
                  console.log(`[FRONTEND] Item ${index} URLs:`, {
                    productImage: processedItem.productImageUrl,
                    storeImage: processedItem.storeImageUrl,
                    productLink: processedItem.url
                  });
                
                console.log(`[FRONTEND] Final processed item ${index}:`, processedItem);
                return processedItem;
              });
              
              console.log(`[FRONTEND] Successfully created ${parsed.products.length} product objects`);
            }
          } catch (e) {
            console.error(`[FRONTEND] JSON parsing failed:`, e);
            console.error(`[FRONTEND] Failed to parse:`, jsonText);
          }
        } else {
          console.warn(`[FRONTEND] No JSON found in analysis text`);
        }

        // Strategy 2: Extract recommendation
        const lines = analysisText.split('\n');
        const recommendationKeywords = ['recommendation', 'should', 'buy', 'consider', 'suggest', 'advice'];
        
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i].toLowerCase();
          if (recommendationKeywords.some(keyword => line.includes(keyword))) {
            const startIdx = i;
            let endIdx = i;
            
            // Find the end of the recommendation section
            while (endIdx < lines.length - 1 && 
                   !lines[endIdx + 1].match(/^\d+\.|\*\*|\#\#|```/)) {
              endIdx++;
            }
            
            parsed.recommendation = lines.slice(startIdx, endIdx + 1)
              .join(' ')
              .replace(/^(recommendation|conclusion)[:\s]*/i, '')
              .trim();
            break;
          }
        }

        // Strategy 3: Extract structured data using regex
        if (parsed.products.length === 0) {
          const productPattern = /(?:product|item)[:\s]*([^\n]+)[\s\S]*?(?:store|retailer)[:\s]*([^\n]+)[\s\S]*?(?:price|cost)[:\s]*\$?(\d+(?:\.\d{2})?)/gi;
          let match;
          
          while ((match = productPattern.exec(analysisText)) !== null) {
            parsed.products.push({
              name: match[1].trim(),
              store: match[2].trim(),
              price: parseFloat(match[3]),
              originalPrice: null,
              savings: null
            });
          }
        }

        // Strategy 4: Extract price information from text
        const pricePattern = /\$(\d+(?:\.\d{2})?)/g;
        const storePattern = /(amazon|walmart|best buy|target|costco|ebay|newegg)/gi;
        
        const prices = [...analysisText.matchAll(pricePattern)].map(m => parseFloat(m[1]));
        const stores = [...analysisText.matchAll(storePattern)].map(m => m[1]);
        
        if (prices.length > 0 && parsed.products.length === 0) {
          for (let i = 0; i < Math.min(prices.length, 3); i++) {
            parsed.products.push({
              name: 'Product Alternative',
              store: stores[i] || 'Online Store',
              price: prices[i],
              originalPrice: null,
              savings: null
            });
          }
        }

        // Generate summary
        if (parsed.products.length > 0) {
          const avgPrice = parsed.products.reduce((sum, p) => sum + p.price, 0) / parsed.products.length;
          const minPrice = Math.min(...parsed.products.map(p => p.price));
          const maxPrice = Math.max(...parsed.products.map(p => p.price));
          
          parsed.summary = `Found ${parsed.products.length} alternatives ranging from $${minPrice.toFixed(2)} to $${maxPrice.toFixed(2)}`;
        }

             } catch (error) {
         console.error('[FRONTEND] Error parsing AI response:', error);
       }

       console.log(`[FRONTEND] Parsing complete. Found ${parsed.products.length} products, recommendation: ${!!parsed.recommendation}`);
       return parsed;
     }

    // Store logo mapping for major retailers
    function getStoreLogoUrl(storeName) {
      const store = storeName.toLowerCase().trim();
      
      // Try Clearbit API first (correct URL format)
      const clearbitUrl = `https://logo.clearbit.com/${getDomainFromStore(store)}`;
      
      // Fallback to reliable Wikipedia logos
      const logoMap = {
        'amazon': 'https://upload.wikimedia.org/wikipedia/commons/a/a9/Amazon_logo.svg',
        'walmart': 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Walmart_logo.svg',
        'target': 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Target_logo.svg',
        'best buy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'bestbuy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'dell': 'https://upload.wikimedia.org/wikipedia/commons/4/48/Dell_Logo.svg',
        'hp': 'https://upload.wikimedia.org/wikipedia/commons/a/ad/HP_logo_2012.svg',
        'microsoft': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'microsoft store': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'apple': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'apple store': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'costco': 'https://upload.wikimedia.org/wikipedia/commons/5/59/Costco_Wholesale_logo_2010-10-26.svg',
        'ebay': 'https://upload.wikimedia.org/wikipedia/commons/1/1b/EBay_logo.svg',
        'newegg': 'https://upload.wikimedia.org/wikipedia/commons/0/07/Newegg_logo.svg'
      };
      
             // Return Clearbit URL first, fallback handled by error handlers
       return clearbitUrl;
    }

    function getDomainFromStore(storeName) {
      const domainMap = {
        'amazon': 'amazon.com',
        'walmart': 'walmart.com',
        'target': 'target.com',
        'best buy': 'bestbuy.com',
        'bestbuy': 'bestbuy.com',
        'dell': 'dell.com',
        'hp': 'hp.com',
        'microsoft': 'microsoft.com',
        'microsoft store': 'microsoft.com',
        'apple': 'apple.com',
        'apple store': 'apple.com',
        'costco': 'costco.com',
        'ebay': 'ebay.com',
        'newegg': 'newegg.com'
      };
      
      return domainMap[storeName.toLowerCase()] || `${storeName.toLowerCase()}.com`;
    }

    function getStoreLogoFallback(storeName) {
      const store = storeName.toLowerCase().trim();
      const logoMap = {
        'amazon': 'https://upload.wikimedia.org/wikipedia/commons/a/a9/Amazon_logo.svg',
        'walmart': 'https://upload.wikimedia.org/wikipedia/commons/c/ca/Walmart_logo.svg',
        'target': 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Target_logo.svg',
        'best buy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'bestbuy': 'https://upload.wikimedia.org/wikipedia/commons/f/f5/Best_Buy_Logo.svg',
        'dell': 'https://upload.wikimedia.org/wikipedia/commons/4/48/Dell_Logo.svg',
        'hp': 'https://upload.wikimedia.org/wikipedia/commons/a/ad/HP_logo_2012.svg',
        'microsoft': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'microsoft store': 'https://upload.wikimedia.org/wikipedia/commons/9/96/Microsoft_logo_%282012%29.svg',
        'apple': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'apple store': 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg',
        'costco': 'https://upload.wikimedia.org/wikipedia/commons/5/59/Costco_Wholesale_logo_2010-10-26.svg',
        'ebay': 'https://upload.wikimedia.org/wikipedia/commons/1/1b/EBay_logo.svg',
        'newegg': 'https://upload.wikimedia.org/wikipedia/commons/0/07/Newegg_logo.svg'
      };
      
      return logoMap[store] || null;
    }

    // Generate fallback product image based on category
    function getProductPlaceholder(productName) {
      const name = productName.toLowerCase();
      
      if (name.includes('phone') || name.includes('mobile') || name.includes('smartphone')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <rect x="5" y="2" width="14" height="20" rx="2" ry="2"/>
          <line x1="12" y1="18" x2="12.01" y2="18"/>
        </svg>`;
      } else if (name.includes('laptop') || name.includes('computer') || name.includes('pc')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
          <line x1="8" y1="21" x2="16" y2="21"/>
          <line x1="12" y1="17" x2="12" y2="21"/>
        </svg>`;
      } else if (name.includes('headphone') || name.includes('earphone') || name.includes('audio')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <path d="M3 18v-6a9 9 0 0 1 18 0v6"/>
          <path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"/>
        </svg>`;
      } else if (name.includes('book') || name.includes('magazine')) {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
        </svg>`;
      } else {
        return `<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"/>
          <line x1="3" y1="6" x2="21" y2="6"/>
          <path d="M16 10a4 4 0 0 1-8 0"/>
        </svg>`;
      }
    }

    // Image error handling functions
    function handleProductImageError(elementId, productName) {
      console.log(`[FRONTEND] Product image failed for: ${productName}`);
      const element = document.getElementById(elementId);
      if (element) {
        element.innerHTML = `<div class="product-placeholder">${getProductPlaceholder(productName)}</div>`;
      }
    }

    function handleStoreLogoError(elementId, storeName) {
      console.log(`[FRONTEND] Store logo failed for: ${storeName}, trying fallback`);
      const element = document.getElementById(elementId);
      if (element) {
        const fallbackUrl = getStoreLogoFallback(storeName);
        if (fallbackUrl) {
          // Try Wikipedia fallback
          element.innerHTML = `
            <img src="${fallbackUrl}" alt="${storeName}" class="store-logo" 
                 onload="console.log('Fallback logo loaded: ${storeName}')"
                 onerror="handleStoreLogoFinalError('${elementId}', '${storeName}')">
            <span class="store-name">${storeName}</span>
          `;
        } else {
          handleStoreLogoFinalError(elementId, storeName);
        }
      }
    }

    function handleStoreLogoFinalError(elementId, storeName) {
      console.log(`[FRONTEND] All store logos failed for: ${storeName}, using icon`);
      const element = document.getElementById(elementId);
      if (element) {
        element.innerHTML = `
          <div class="store-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
              <polyline points="9,22 9,12 15,12 15,22"/>
            </svg>
          </div>
          <span class="store-name">${storeName}</span>
        `;
      }
    }

    // Enhanced photo management with request throttling
    let isCheckingPhotos = false;
    let pollInterval = null;
    
    async function checkForPhotos() {
      // Prevent concurrent requests
      if (isCheckingPhotos) {
        console.log('[FRONTEND] Skipping photo check - already in progress');
        return;
      }
      
      isCheckingPhotos = true;
      
      try {
        const response = await fetch('/api/photos');

        if (!response.ok) {
          if (response.status === 401) {
            showEmptyState('Authentication Required', 'Please open this page from the MentraOS app');
            return;
          }
          throw new Error('Failed to fetch photos');
        }

        const data = await response.json();
        
        if (data.photos && data.photos.length > 0) {
          currentPhotos = data.photos;
          updatePhotoCatalogue();
          
          // Auto-select latest photo if none selected
          if (currentPhotoIndex === -1) {
            selectPhoto(currentPhotos.length - 1);
          }
          
          // Check for analysis updates (less frequently)
          checkForAnalysisUpdates();
        } else {
          showEmptyState('No Photos', 'Take photos with your Mentra glasses to begin intelligent price analysis');
        }
      } catch (error) {
        console.error('Error checking for photos:', error);
        showEmptyState('Connection Error', 'Unable to connect to the service. Please check your connection.');
      } finally {
        isCheckingPhotos = false;
      }
    }

    function updatePhotoCatalogue() {
      const catalogue = document.getElementById('photo-catalogue');
      
      if (currentPhotos.length === 0) {
        showEmptyState('No Photos', 'Take photos with your Mentra glasses to begin intelligent price analysis');
        return;
      }

      catalogue.innerHTML = currentPhotos.map((photo, index) => `
        <div class="photo-item ${index === currentPhotoIndex ? 'active' : ''}" 
             onclick="selectPhoto(${index})" 
             data-index="${index}">
          <img src="/api/photo/${photo.requestId}" alt="Product ${index + 1}" />
          <div class="photo-overlay">
            <div class="photo-meta">
              <span class="analysis-badge ${photo.hasAnalysis ? 'complete' : 'pending'}">
                ${photo.hasAnalysis ? 'Analyzed' : 'Processing'}
              </span>
            </div>
          </div>
        </div>
      `).join('');
    }

    function selectPhoto(index) {
      currentPhotoIndex = index;
      updatePhotoCatalogue();
      displaySelectedPhoto();
      
      const photo = currentPhotos[index];
      if (photo.hasAnalysis) {
        loadAnalysis(photo.requestId);
      } else {
        showAnalysisLoading();
        checkForAnalysis(photo.requestId);
      }
    }

    function displaySelectedPhoto() {
      const mainDisplay = document.getElementById('main-display');
      const photo = currentPhotos[currentPhotoIndex];
      
      mainDisplay.innerHTML = `
        <div class="photo-display">
          <img src="/api/photo/${photo.requestId}" alt="Selected Product" />
        </div>
      `;
    }

    function showAnalysisLoading() {
      const globalStatus = document.getElementById('global-status');
      globalStatus.className = 'status-pill analyzing pulse';
      globalStatus.innerHTML = '<div class="status-spinner"></div> Analyzing...';
      
      const analysisSection = document.getElementById('analysis-section');
      analysisSection.style.display = 'flex';
      analysisSection.innerHTML = `
        <div class="panel glass-elevated">
          <div class="panel-header">
            <div class="panel-title">Analyzing Product</div>
            <div class="panel-subtitle">Processing with AI...</div>
          </div>
          <div class="panel-content">
            <div class="empty-state">
              <div class="empty-icon pulse">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
                  <polyline points="3.27,6.96 12,12.01 20.73,6.96"/>
                  <line x1="12" y1="22.08" x2="12" y2="12"/>
                </svg>
              </div>
              <div class="empty-title">AI Analysis in Progress</div>
              <div class="empty-subtitle">Our advanced algorithms are analyzing your product and comparing market prices</div>
            </div>
          </div>
        </div>
      `;
    }

         async function checkForAnalysis(requestId, retryCount = 0) {
       try {
         console.log(`[FRONTEND] Checking for analysis for requestId: ${requestId} (attempt ${retryCount + 1})`);
         
         // Add a timeout to prevent hanging requests
         const controller = new AbortController();
         const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
         
         const response = await fetch(`/api/analysis/${requestId}`, {
           signal: controller.signal
         });
         
         clearTimeout(timeoutId);
         console.log(`[FRONTEND] Analysis response status: ${response.status}`);

        if (response.status === 404) {
           console.log(`[FRONTEND] Analysis not ready yet for ${requestId}, retrying in 3s`);
           // Increase retry interval and limit retries
           if (retryCount < 10) {
             setTimeout(() => checkForAnalysis(requestId, retryCount + 1), 3000);
           } else {
             console.warn('[FRONTEND] Max retries reached for analysis check');
             showAnalysisError('Analysis taking longer than expected');
           }
          return;
        }

        if (!response.ok) {
           const errorText = await response.text();
           console.error(`[FRONTEND] Analysis request failed: ${response.status} - ${errorText}`);
           throw new Error(`Failed to fetch analysis: ${response.status}`);
         }

         const data = await response.json();
         console.log(`[FRONTEND] Received analysis data:`, data);
         
         if (!data.analysis) {
           console.error('[FRONTEND] No analysis in response data');
           throw new Error('No analysis data received');
         }
         
         analysisCache.set(requestId, data.analysis);
         displayAnalysis(data.analysis);
         
       } catch (error) {
         if (error.name === 'AbortError') {
           console.error('[FRONTEND] Analysis request timed out');
           showAnalysisError('Request timed out');
         } else {
           console.error('[FRONTEND] Error checking for analysis:', error);
           showAnalysisError(error.message || error.toString());
         }
       }
     }

         function displayAnalysis(analysisText) {
       console.log(`[FRONTEND] Displaying analysis:`, analysisText);
       
       const parsed = parseAIResponse(analysisText);
       console.log(`[FRONTEND] Parsed analysis:`, parsed);
       
       // Show the analysis section with proper vertical stacking
       const analysisSection = document.getElementById('analysis-section');
       analysisSection.style.display = 'block';
       
       if (parsed.products.length > 0) {
         console.log(`[FRONTEND] Found ${parsed.products.length} products to display`);
         
         // Find the best price for highlighting
         const minPrice = Math.min(...parsed.products.map(p => p.price));
         
         const priceTable = `
           <div class="price-comparison-table">
             <div class="table-header">
               <div class="header-cell">
                 <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                   <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"/>
                   <line x1="3" y1="6" x2="21" y2="6"/>
                   <path d="M16 10a4 4 0 0 1-8 0"/>
                 </svg>
                 Product Details
               </div>
               <div class="header-cell">
                 <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                   <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                   <polyline points="9,22 9,12 15,12 15,22"/>
                 </svg>
                 Store
               </div>
               <div class="header-cell">
                 <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                   <line x1="12" y1="1" x2="12" y2="23"/>
                   <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/>
                 </svg>
                 Price
               </div>
               <div class="header-cell">
                 <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                   <circle cx="12" cy="12" r="3"/>
                   <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2 2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
                 </svg>
                 Action
               </div>
             </div>
             ${parsed.products.map((product, index) => {
               const storeLogoUrl = getStoreLogoUrl(product.store);
               const isBestPrice = product.price === minPrice && parsed.products.length > 1;
               
               return `
                 <div class="table-row">
                   <div class="product-cell">
                     <div class="product-image" id="product-img-${index}">
                       ${product.productImageUrl ? 
                         `<img src="${product.productImageUrl}" alt="${product.name}" onload="console.log('Product image loaded: ${product.name}')" onerror="handleProductImageError('product-img-${index}', '${product.name}')">` : 
                         `<div class="product-placeholder">${getProductPlaceholder(product.name)}</div>`
                       }
                     </div>
                     <div class="product-details">
                       <div class="product-name">${product.name}</div>
                       ${product.description ? `<div class="product-description">${product.description}</div>` : ''}
                       ${product.availability ? 
                         `<div class="product-availability ${product.availability.toLowerCase().includes('stock') ? 'in-stock' : 'out-of-stock'}">
                            ${product.availability}
                          </div>` : ''
                       }
                     </div>
                   </div>
                   <div class="store-cell">
                     <div class="store-info" id="store-logo-${index}">
                       ${storeLogoUrl ? 
                         `<img src="${storeLogoUrl}" alt="${product.store}" class="store-logo" onload="console.log('Store logo loaded: ${product.store}')" onerror="handleStoreLogoError('store-logo-${index}', '${product.store}')">` : 
                         `<div class="store-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                              <polyline points="9,22 9,12 15,12 15,22"/>
                            </svg>
                          </div>`
                       }
                       <span class="store-name">${product.store}</span>
                       ${product.rating ? 
                         `<div class="store-rating">
                            ⭐ ${product.rating}/5
                          </div>` : ''
                       }
                     </div>
                   </div>
                   <div class="price-cell ${isBestPrice ? 'best-price' : ''}">
                     ${product.originalPrice ? `<div class="original-price">$${product.originalPrice.toFixed(2)}</div>` : ''}
                     <div class="price-value">${product.priceDisplay}</div>
                     ${product.savings ? `<div class="savings-badge">Save $${product.savings}</div>` : ''}
                   </div>
                   <div class="action-cell">
                     ${product.url ? 
                       `<a href="${product.url}" target="_blank" class="buy-button">
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
                            <polyline points="15,3 21,3 21,9"/>
                            <line x1="10" y1="14" x2="21" y2="3"/>
                          </svg>
                          Buy Now
                        </a>` : 
                       `<button class="buy-button disabled">
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"/>
                            <path d="m9 12 2 2 4-4"/>
                          </svg>
                          Compare
                        </button>`
                     }
                     <button class="compare-button" onclick="window.open('https://www.google.com/search?q=${encodeURIComponent(product.name)}', '_blank')">
                       Compare Prices
                     </button>
                   </div>
                 </div>
               `;
             }).join('')}
           </div>
         `;
         
         document.getElementById('price-comparison').innerHTML = priceTable;
       } else {
         console.log(`[FRONTEND] No structured products found, showing clean analysis`);
         // Show a clean version of the analysis without raw JSON
         const cleanText = analysisText.replace(/```json[\s\S]*?```/g, '').replace(/\n+/g, '\n').trim();
         document.getElementById('price-comparison').innerHTML = `
           <div class="price-card">
             <h3>Analysis Complete</h3>
             <p style="color: var(--text-secondary); line-height: 1.6; white-space: pre-wrap;">${cleanText}</p>
           </div>
         `;
       }
       
       if (parsed.recommendation) {
         console.log(`[FRONTEND] Showing recommendation: ${parsed.recommendation}`);
         document.getElementById('recommendation-text').textContent = parsed.recommendation;
         document.getElementById('recommendation-section').style.display = 'block';
       } else {
         console.log(`[FRONTEND] No recommendation found`);
         document.getElementById('recommendation-section').style.display = 'none';
       }
       
       // Update global status
       const globalStatus = document.getElementById('global-status');
       globalStatus.className = 'status-pill ready';
       globalStatus.innerHTML = 'Analysis Complete';
     }

         function showAnalysisError(errorMessage = 'Unknown error') {
       console.log(`[FRONTEND] Showing analysis error: ${errorMessage}`);
       
       const globalStatus = document.getElementById('global-status');
       globalStatus.className = 'status-pill error';
       globalStatus.innerHTML = 'Analysis Failed';
       
       const analysisSection = document.getElementById('analysis-section');
       analysisSection.style.display = 'flex';
       analysisSection.innerHTML = `
         <div class="panel glass-elevated">
           <div class="panel-header">
             <div class="panel-title">Analysis Error</div>
             <div class="panel-subtitle">Unable to complete analysis</div>
           </div>
           <div class="panel-content">
             <div class="empty-state">
               <div class="empty-icon">
                 <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                   <circle cx="12" cy="12" r="10"/>
                   <line x1="15" y1="9" x2="9" y2="15"/>
                   <line x1="9" y1="9" x2="15" y2="15"/>
                 </svg>
               </div>
               <div class="empty-title">Analysis Failed</div>
               <div class="empty-subtitle">
                 Please try taking another photo or check your connection<br>
                 <small style="color: var(--text-quaternary); margin-top: 8px; display: block;">
                   Error: ${errorMessage}
                 </small>
               </div>
             </div>
           </div>
         </div>
       `;
     }

    function showEmptyState(title, subtitle) {
      const catalogue = document.getElementById('photo-catalogue');
      catalogue.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
              <circle cx="12" cy="13" r="4"/>
            </svg>
          </div>
          <div class="empty-title">${title}</div>
          <div class="empty-subtitle">${subtitle}</div>
        </div>
      `;
    }

    async function checkForAnalysisUpdates() {
      // Throttle analysis updates to prevent overwhelming the API
      if (currentPhotos.length === 0) return;
      
      for (const photo of currentPhotos) {
        if (photo.hasAnalysis && !analysisCache.has(photo.requestId)) {
          try {
            const response = await fetch(`/api/analysis/${photo.requestId}`);
            if (response.ok) {
              const data = await response.json();
              analysisCache.set(photo.requestId, data.analysis);
            }
          } catch (error) {
            console.error('Error fetching analysis:', error);
          }
          // Small delay between requests to prevent API flooding
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }
    }

    async function loadAnalysis(requestId) {
      if (analysisCache.has(requestId)) {
        displayAnalysis(analysisCache.get(requestId));
        return;
      }
      
      try {
        const response = await fetch(`/api/analysis/${requestId}`);
        if (response.ok) {
        const data = await response.json();
          if (data.analysis) {
            analysisCache.set(requestId, data.analysis);
            displayAnalysis(data.analysis);
          }
        } else {
          console.log('Analysis not available yet, will retry automatically');
        }
      } catch (error) {
        console.error('Error loading analysis:', error);
      }
    }

    // Theme management
    function initializeTheme() {
      const savedTheme = localStorage.getItem('theme') || 'dark';
      document.documentElement.setAttribute('data-theme', savedTheme);
      
      // Update theme toggle button
      const themeToggle = document.getElementById('theme-toggle');
      if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
      }
    }

    function toggleTheme() {
      const currentTheme = document.documentElement.getAttribute('data-theme');
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      
      // Add a subtle animation feedback
      const themeToggle = document.getElementById('theme-toggle');
      themeToggle.style.transform = 'scale(0.95)';
      setTimeout(() => {
        themeToggle.style.transform = '';
      }, 100);
    }



    // Initialize application with smart polling
    function startPolling() {
      // Clear any existing polling
      if (pollInterval) {
        clearInterval(pollInterval);
      }
      
      // Start with immediate check
      checkForPhotos();
      
      // Poll every 5 seconds instead of every second to reduce API load
      pollInterval = setInterval(checkForPhotos, 5000);
      
      console.log('[FRONTEND] Started photo polling every 5 seconds');
    }
    
    function stopPolling() {
      if (pollInterval) {
        clearInterval(pollInterval);
        pollInterval = null;
        console.log('[FRONTEND] Stopped photo polling');
      }
    }
    
    // Handle page visibility to pause polling when not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopPolling();
      } else {
        startPolling();
      }
    });
    
    // Handle window focus/blur for better resource management
    window.addEventListener('blur', stopPolling);
    window.addEventListener('focus', startPolling);
    
    // Initialize everything
    initializeTheme();
    startPolling();
  </script>
</body>
</html>
</html>